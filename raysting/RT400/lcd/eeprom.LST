C51 COMPILER V7.01  EEPROM                                                                 01/12/2011 20:51:28 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN eeprom.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE eeprom.c LARGE OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "stc51.h"
   2          #include "intrins.h"
   3          #include "stdio.h"
   4          #include "utili.h"
   5          #include "MATH.H"
   6          #define uchar unsigned char
   7          #define uint unsigned int
   8          #define ulong unsigned long
   9          ulong code Sector[10][4]={
  10                                         {0x8000,0x8001,0x8002,0x8003},
  11                                                 {0x8200,0x8201,0x8202,0x8203},
  12                                             {0x8400,0x8401,0x8402,0x8403},
  13                                                 {0x8600,0x8601,0x8602,0x8603},
  14                                                 {0x8800,0x8801,0x8802,0x8803},
  15                                                 {0x8a00,0x8a01,0x8a02,0x8a03},
  16                                             {0x8c00,0x8c01,0x8c02,0x8c03},
  17                                                 {0x8e00,0x8e01,0x8e02,0x8e03},
  18                                                 {0x9000,0x9001,0x9002,0x9003},
  19                                                 {0x9200,0x9201,0x9202,0x9203},                                            
  20                                                    };
  21          
  22          
  23          
  24          extern void SectorErase(uint sector_addr);      // 扇区擦除
  25          extern uchar byte_read(uint byte_addr);         // byte读
  26          extern void byte_write(uint byte_addr, uchar original_data);    // byte写
  27          extern uchar byte_write_verify(uint byte_addr, uchar original_data);// byte写并校验
  28          extern uchar ArrayWrite(uint begin_addr, uint len, uchar code *array);  // byte数组写并校验
  29          extern void ArrayRead(uint begin_addr, uchar len);              // 读出, 保存在Ttotal[]中
  30          
  31          /*********************************************************************
  32                                     EEPROM使用
  33          *********************************************************************/
  34                          /* - 命令定义 - */
  35          #define RdCommand               0x01    /* 字节读       */
  36          #define PrgCommand              0x02    /* 字节写       */
  37          #define EraseCommand    0x03    /* 扇区擦除 */
  38                          /* 定义常量 */
  39          #define Error   1
  40          #define Ok      0
  41          /* 定义Flash对应于20MHz晶振系统的操作等待时间 */
  42          /* 时钟倍频时WaitTime用 0x00*/
  43          
  44          #define WaitTime        0x01
  45                         /* - 定义扇区大小 - */
  46          #define PerSector               512
  47          extern uchar Ttotal[];
  48                         /* = 打开 ISP,IAP 功能 = */
  49          void ISP_IAP_enable(void)
  50          {
  51   1              EA      =       0;                      /* 关中断       */
  52   1              ISP_CONTR =     ISP_CONTR & 0x18;       /* 0001,1000    */
  53   1              ISP_CONTR =     ISP_CONTR | WaitTime;   /* 写入硬件延时 */
  54   1              ISP_CONTR =     ISP_CONTR | 0x80;       /* ISPEN=1      */
  55   1      }
C51 COMPILER V7.01  EEPROM                                                                 01/12/2011 20:51:28 PAGE 2   

  56                           /* = 关闭 ISP,IAP 功能 = */
  57          void ISP_IAP_disable(void)
  58          {
  59   1              ISP_CONTR       =       ISP_CONTR & 0x7f;       /* ISPEN = 0 */
  60   1              ISP_TRIG        =       0x00;
  61   1              EA                      =   1;                  /* 开中断    */
  62   1      }
  63                          /* = 公用的触发代码 = */
  64          void ISPgoon(void)
  65          {
  66   1              ISP_IAP_enable();                       /* 打开 ISP,IAP 功能    */
  67   1              ISP_TRIG        =       0x46;           /* 触发ISP_IAP命令字节1 */
  68   1              ISP_TRIG        =       0xb9;           /* 触发ISP_IAP命令字节2 */
  69   1              _nop_();
  70   1      }
  71                             /* = 字节读 = */
  72          uchar byte_read(uint byte_addr)
  73          {   
  74   1              ISP_ADDRH = (uchar)(byte_addr >> 8);            /* 地址赋值     */
  75   1              ISP_ADDRL = (uchar)(byte_addr & 0x00ff);
  76   1              ISP_CMD   = ISP_CMD     & 0xf8;                 /* 清除低3位    */
  77   1              ISP_CMD   = ISP_CMD     | RdCommand;           /* 写入读命令    */
  78   1              ISPgoon();                                      /* 触发执行     */
  79   1              ISP_IAP_disable();                              /* 关闭ISP,IAP功能*/
  80   1              return (ISP_DATA);                              /* 返回读到的数据*/
  81   1      }
  82                            /* = 扇区擦除 = */
  83          void SectorErase(uint sector_addr)
  84          {
  85   1              uint iSectorAddr;
  86   1              iSectorAddr = (sector_addr & 0xfe00);         /* 取扇区地址 */
  87   1              ISP_ADDRH = (uchar)(iSectorAddr >> 8);
  88   1              ISP_ADDRL = 0x00;
  89   1              ISP_CMD = ISP_CMD & 0xf8;                     /* 清空低3位      */
  90   1              ISP_CMD = ISP_CMD | EraseCommand;             /* 擦除命令3      */
  91   1              ISPgoon();                                      /* 触发执行     */
  92   1              ISP_IAP_disable();                              /* 关闭ISP,IAP功能*/
  93   1      
  94   1      }
  95                         /* = 字节写 = */
  96          void byte_write(uint byte_addr, uchar original_data)
  97          {
  98   1              ISP_ADDRH =     (uchar)(byte_addr >> 8);        /* 取地址       */
  99   1              ISP_ADDRL =     (uchar)(byte_addr & 0x00ff);
 100   1              ISP_CMD  = ISP_CMD & 0xf8;                      /* 清低3位      */
 101   1              ISP_CMD  = ISP_CMD | PrgCommand;                /* 写命令2      */
 102   1              ISP_DATA = original_data;                       /* 写入数据准备 */
 103   1              ISPgoon();                                      /* 触发执行     */
 104   1              ISP_IAP_disable();                              /* 关闭IAP功能  */
 105   1      }
 106          
 107          
 108          /********举例说明********************************************
 109            byte_read(Sector[1][3])        读一个字节
 110            byte_write(Sector[1][3],char)  把char写到这个字节中
 111            SectorErase(Sector[1][2])     扇区清除 
 112          **/
 113          extern ulong code Sector[10][4];
 114          #define RS_SECTBASE     Sector[0][0]
 115          #define PRB_SECT1       Sector[1][0]
 116          #define PRB_SECT2       Sector[2][0]
 117          void LoadProbeData()
C51 COMPILER V7.01  EEPROM                                                                 01/12/2011 20:51:28 PAGE 3   

 118          {
 119   1              uint i;
 120   1              uchar* arr = (uchar*)&prbdata;
 121   1      
 122   1              for(i = PRB_SECT1;i < (PRB_SECT1 + (sizeof(PRBDATA)/2));i++)
 123   1              {
 124   2                      *arr++ = byte_read(i);
 125   2              }
 126   1              for(i = PRB_SECT2;i < (PRB_SECT2 + (sizeof(PRBDATA)/2));i++)
 127   1              {
 128   2                      *arr++ = byte_read(i);
 129   2              }
 130   1      }
 131          void SaveProbeData()
 132          {
 133   1              ulong i;
 134   1              uchar* arr; 
 135   1      
 136   1              arr = (uchar*)&prbdata;
 137   1              i = PRB_SECT1;
 138   1              SectorErase(i);
 139   1              for(;i < (PRB_SECT1+(sizeof(PRBDATA)/2));i++)
 140   1              {
 141   2                      byte_write(i,*arr++);
 142   2              }
 143   1              i = PRB_SECT2;
 144   1              SectorErase(i);
 145   1              for(;i < (PRB_SECT2+(sizeof(PRBDATA)/2));i++)
 146   1              {
 147   2                      byte_write(i,*arr++);
 148   2              }
 149   1      
 150   1      }
 151          void LoadFromEEPROM()
 152          {
 153   1              ulong i = RS_SECTBASE;
 154   1              uchar* arr = (uchar*)&sdata;
 155   1      
 156   1              for(i=RS_SECTBASE;i<(RS_SECTBASE+sizeof(SYSDATA));i++)
 157   1              {
 158   2                      *arr++ = byte_read(i);
 159   2              }
 160   1      }
 161          void SaveToEEPROM()
 162          {
 163   1              ulong i = RS_SECTBASE;
 164   1              uchar* arr = (uchar*)&sdata;
 165   1              SectorErase(RS_SECTBASE);
 166   1      
 167   1              for(i=RS_SECTBASE;i<(RS_SECTBASE+sizeof(SYSDATA));i++)
 168   1              {
 169   2                      byte_write(i,*arr++);
 170   2              }
 171   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    690    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =   ----      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V7.01  EEPROM                                                                 01/12/2011 20:51:28 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

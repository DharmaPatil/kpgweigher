C51 COMPILER V7.01  LCD                                                                    12/30/2014 10:26:50 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN lcd.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE lcd.c LARGE OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <string.h>
   2          #include "font.h"
   3          #include "lcd.h"
   4          //#include "sjDefine.h"
   5          #include "sjSerial.h"
   6          
   7          void sleepms(unsigned int i)
   8          {
   9   1          unsigned int j;
  10   1              j = 10;
  11   1              while(j-- > 0)
  12   1              {
  13   2                      while(i-- > 0)
  14   2                      ;
  15   2              }
  16   1      }
  17          #define MARK_HEAD        0xAA
  18          #define MARK_TAIL        0x55
  19          
  20          
  21          extern void sjSerialSendByte2(u8);
  22          extern void io_putc(unsigned char);
  23          void prints(u8 *str, u8 length, char uart_port)
  24          {
  25   1              if(uart_port == PORT_KBD)
  26   1              {
  27   2                      while(length-- > 0){    
  28   3                      sjSerialSendByte2(*str++);            
  29   3              }
  30   2              }
  31   1              if(uart_port == PORT_NAV)
  32   1              {
  33   2                      while(length-- > 0){    
  34   3                      io_putc(*str++);            
  35   3              }
  36   2              }
  37   1      }
  38          
  39          uchar key;
  40          
  41          static uchar kbd_state;
  42          extern void DBG(unsigned char);
  43          void kbd_uart_push(uchar dat)
  44          {           
  45   1              if(dat == STATUS_IDLE||
  46   1                 dat == STATUS_ERR||
  47   1                 dat == STATUS_DRAW||
  48   1                 dat == STATUS_DONE) //lcd acknowledge
  49   1              {
  50   2                      kbd_state = dat;
  51   2                      return;
  52   2              }  
  53   1                      if(key == KEY_INVALID)
  54   1                              key = dat;
  55   1              
C51 COMPILER V7.01  LCD                                                                    12/30/2014 10:26:50 PAGE 2   

  56   1      }  
  57          static u8 lcdcmd[40];
  58          
  59          static u8 head[3] = {MARK_HEAD,MARK_HEAD,MARK_HEAD};
  60          static u8 tail[3] = {MARK_TAIL,MARK_TAIL,MARK_TAIL};
  61          
  62          static u8 hex2ch[2];  
  63          void hex2char(uchar a)
  64          {
  65   1              uchar h,l;
  66   1              h = (a & 0xf0) >> 4;
  67   1              l = (a & 0x0f);
  68   1              if(h <= 9)              
  69   1                      hex2ch[0] = (h+'0');
  70   1              else
  71   1                      hex2ch[0] = (h+'A'-0x0a);
  72   1              if(l <= 9)
  73   1                      hex2ch[1] = (l+'0');
  74   1              else
  75   1                      hex2ch[1] = (l+'A'-0x0a);               
  76   1      }
  77          void onecmd(uchar len)
  78          {    
  79   1           uchar i = 0;
  80   1           uchar sum;
  81   1           sum = 0;
  82   1           prints(head,3,PORT_KBD); //send head
  83   1           for(i = 0;i<len;i++)     //caculate cksum     
  84   1           {              
  85   2              hex2char(lcdcmd[i]);
  86   2                      prints(hex2ch,2,PORT_KBD);
  87   2              sum = sum + lcdcmd[i];
  88   2           }                        
  89   1           lcdcmd[i] = 0xff - sum;
  90   1           hex2char(lcdcmd[i]);
  91   1           prints(hex2ch,2,PORT_KBD);
  92   1           prints(tail,3,PORT_KBD); //send tail      
  93   1      }
  94          static u8 idle[10] = {MARK_HEAD,MARK_HEAD,MARK_HEAD,'1','2','E','D',MARK_TAIL,MARK_TAIL,MARK_TAIL};
  95          void sendcmd(uchar len)
  96          {
  97   1           ulong timeout;  
  98   1      //     if(DEBUG == 1)        return;
  99   1           while(kbd_state != STATUS_IDLE)
 100   1           {
 101   2              if(kbd_state == STATUS_DRAW)
 102   2                      continue;
 103   2              if(kbd_state == STATUS_ERR)
 104   2              {
 105   3                      prints(idle,10,PORT_KBD);
 106   3                      kbd_state = STATUS_DRAW;     
 107   3              }   
 108   2           }                                  
 109   1           onecmd(len);  
 110   1           timeout = 0;
 111   1           kbd_state = STATUS_DONE;
 112   1           while(kbd_state != STATUS_IDLE)
 113   1           {
 114   2               if(kbd_state == STATUS_ERR)
 115   2               {
 116   3                      onecmd(len);     
 117   3                      timeout = 0;
C51 COMPILER V7.01  LCD                                                                    12/30/2014 10:26:50 PAGE 3   

 118   3               }
 119   2               if(timeout < 655350)
 120   2               {
 121   3                      sleepms(2);
 122   3                      timeout++;    
 123   3               }else{                    
 124   3                      onecmd(len);
 125   3                      timeout = 0;
 126   3               }
 127   2           }
 128   1      }
 129          /*------------------初始化-----------------*/
 130          void LCD_Init (void) 
 131          {   
 132   1              kbd_state = STATUS_IDLE;
 133   1              lcdcmd[0] = CMDO_LCD_INIT;
 134   1              sendcmd(1);
 135   1              //do it twice avoid the missing of first command on boot up
 136   1              lcdcmd[0] = CMDO_LCD_INIT;
 137   1              sendcmd(1);
 138   1              
 139   1      }
 140          
 141          /********************************************************/
 142          /* 清屏                                                 */
 143          /********************************************************/
 144          void LCD_Cls(void) 
 145          {           
 146   1              lcdcmd[0] = CMDO_LCD_CLS;
 147   1              sendcmd(1);
 148   1      }
 149          void LCD_ClsBlock(uchar x1,uchar y1,uchar x2,uchar y2)
 150          {
 151   1              lcdcmd[0] = CMDO_LCD_CLSBLK;
 152   1              lcdcmd[1] = x1;
 153   1              lcdcmd[2] = y1;
 154   1              lcdcmd[3] = x2;
 155   1              lcdcmd[4] = y2;                
 156   1              sendcmd(5);
 157   1      }
 158          void display_buttons(uchar btn_pos,uchar btn_val)   //send led status to sub board
 159          {              
 160   1              lcdcmd[0] = CMDO_DISPLAYBTN;
 161   1              if(btn_val == 0)
 162   1                    btn_pos += 4; //change from 'a'-'d' to 'e'-'h'   //add 4
 163   1              lcdcmd[1] = btn_pos;      
 164   1              sendcmd(2);
 165   1      }
 166          
 167          
 168          /*      设定图形x,y值*/
 169          /*
 170          void LCD_GraphSetAddr(uchar x,uchar y) 
 171          {
 172                  uint xy;
 173                  xy=y;
 174                  xy=xy*16+x+256;
 175                  //LCD_CE(0);
 176                  LCD_Write2(xy&0xff,xy/256,0x24);
 177          }
 178          */
 179          /*      设定文本x,y值   */
C51 COMPILER V7.01  LCD                                                                    12/30/2014 10:26:50 PAGE 4   

 180          /*
 181          void LCD_TextSetAddr(uchar x,uchar y) 
 182          {
 183                  //LCD_CE(0);
 184                  LCD_Write2(y*16+x,0,0x24);
 185          }
 186          */
 187          /*      清除一点*/
 188          /*
 189          void LCD_ClrPixel(uchar x,uchar y) 
 190          {
 191                  uchar b;
 192                  uint addr = LCD_GRAPH_HOME_ADDR + y * LCD_WIDTH + x / 8;
 193          
 194                  b = 7 - (x % 8);
 195                  
 196                  LCD_WriteInt(addr,0x24);
 197                  LCD_Comm(0xf0|b);
 198          }
 199          */
 200          /*      点亮一点        */
 201          /*
 202          void LCD_Putpixel(uchar x,uchar y) 
 203          {
 204                  uchar b;
 205                  uint addr = LCD_GRAPH_HOME_ADDR + ((uint)y * LCD_WIDTH) + x>>3;
 206          
 207                  b = 7 - (x % 8);
 208                  
 209                  LCD_WriteInt(addr,0x24);
 210                  LCD_Comm(0xf8|b);
 211          }
 212          */
 213          /*      x,y处显示光标   */
 214          /*
 215          void LCD_ShowCursor(uchar x,uchar y) 
 216          {
 217                  return;
 218                  //LCD_CE(0);
 219                  LCD_Comm(0x97); //光标开
 220                  LCD_Write2(x,y,0x21);
 221          }
 222          
 223          //      取消光标
 224          
 225          void LCD_HideCursor(void)  
 226          {
 227                  return; 
 228                  //LCD_CE(0);
 229                  LCD_Comm(0x9c); 
 230          }
 231          */
 232          /*
 233          void LCD_PrintNumStr(uchar x,uchar y,uchar *s) 
 234          {
 235                  x =(x / 8) * 8;
 236          
 237                  while(*s)
 238                  {
 239                          LCD_PutImg(x,y,1,11,Num_Tab + (*s - '0') * 11);
 240                          
 241                          x = x + 8;
C51 COMPILER V7.01  LCD                                                                    12/30/2014 10:26:50 PAGE 5   

 242                          
 243                          s++;
 244                  }
 245          }
 246          
 247          
 248          void LCD_PrintBlackBlock(uchar x,uchar y,bool not_empty)
 249          {
 250                  x =(x / 8) * 8;
 251                  LCD_PutImg(x,y,1,11,BlockTab + (not_empty?0:1) * 11);
 252          }
 253          */
 254          
 255          void LCD_ReverseRect(uchar x,uchar y,uchar w,uchar h)
 256          {
 257   1              lcdcmd[0] = CMDO_LCD_REVERSE;
 258   1              lcdcmd[1] = x;
 259   1              lcdcmd[2] = y;
 260   1              lcdcmd[3] = w;
 261   1              lcdcmd[4] = h;                
 262   1              sendcmd(5);
 263   1      }
 264          /*--------------显示字符------------------*/
 265          /*
 266          void LCD_TextPutchar(uchar x,uchar y,uchar c) 
 267          {
 268                  //LCD_CE(0);
 269                  LCD_WriteInt(LCD_TEXT_HOME_ADDR + LCD_WIDTH * y + x,0x24);
 270                  LCD_Comm(0xb0);
 271                  LCD_AutoWrite(c - 0x20);
 272                  LCD_Comm(0xb2);
 273          }
 274          
 275          void LCD_TextPrint(uchar x,uchar y,char *s) 
 276          {
 277                  //LCD_CE(0);
 278                  LCD_WriteInt(LCD_TEXT_HOME_ADDR + LCD_WIDTH * y + x,0x24);
 279                  LCD_Comm(0xb0);
 280                  while(*s)
 281                  {
 282                          LCD_AutoWrite(*s - 0x20);
 283                          s++;
 284                  }
 285                  LCD_Comm(0xb2);
 286          }
 287          void LCD_TextPrintWord(uchar x,uchar y,uint16 n,uchar start) 
 288          {
 289                  uchar buf[4];
 290                  int i;
 291                  
 292                  if(start > 3) start = 0;
 293                  
 294                  for(i = 0; i < 4; i++)
 295                  {
 296                          buf[i] = n % 10;   
 297                          n /= 10;
 298                  }
 299                  
 300                  for(i = 3-start; i >= 0; i--)
 301                  {
 302                          LCD_TextPutchar(x,y,'0' + buf[i]);
 303                          x ++;
C51 COMPILER V7.01  LCD                                                                    12/30/2014 10:26:50 PAGE 6   

 304                  }
 305          }
 306          
 307          void LCD_TextPrintHex(uchar x,uchar y,uchar hex) 
 308          {
 309                  uchar c1,c2;
 310                  //低4位
 311                  c1 = hex & 0x0f;        //lo
 312                  //高4位
 313                  c2 = (hex >> 4) & 0x0f; //hi
 314                  
 315                  LCD_TextPutchar(x,y,HexTable[c2]);
 316                  LCD_TextPutchar(x+1,y,HexTable[c1]);
 317          }
 318          */
 319          /************************************************/
 320          /*画线。任意方向的斜线,直线数学方程 aX+bY=1     */
 321          /************************************************/
 322          /*
 323          void LCD_Linexy(uchar x0,uchar y0,uchar xt,uchar yt) 
 324          {
 325                  register uchar t;
 326                  int xerr=0,yerr=0,delta_x,delta_y,distance;
 327                  int incx,incy,uRow,uCol;
 328          
 329                  delta_x = xt-x0;                                //计算坐标增量
 330                  delta_y = yt-y0;
 331                  uRow = x0;
 332                  uCol = y0;
 333                  if(delta_x>0) incx=1;                           //设置单步方向
 334                  else if( delta_x==0 ) incx=0;                   //垂直线
 335                  else {incx=-1;delta_x=-delta_x;}
 336          
 337                  if(delta_y>0) incy=1;
 338                  else if( delta_y==0 ) incy=0;                   //水平线
 339                  else {incy=-1;delta_y=-delta_y;}
 340          
 341                  if( delta_x > delta_y ) distance=delta_x;       //选取基本增量坐标轴
 342                  else distance=delta_y;
 343          
 344                  //LCD_CE(0);
 345                  for( t=0;t <= distance+1; t++ )
 346                  {                                       //画线输出
 347                          LCD_Putpixel(uRow,uCol);                        //画点
 348                          xerr += delta_x ;
 349                          yerr += delta_y ;
 350                          
 351                          if( xerr > distance )
 352                          {
 353                                  xerr-=distance;
 354                                  uRow+=incx;
 355                          }
 356                          if( yerr > distance )
 357                          {
 358                                  yerr-=distance;
 359                                  uCol+=incy;
 360                          }
 361                  }
 362          }
 363          */
 364          /*
 365          void LCD_LineH(uchar y) 
C51 COMPILER V7.01  LCD                                                                    12/30/2014 10:26:50 PAGE 7   

 366          {
 367                  char i;
 368                  
 369                  //LCD_CE(0);
 370                  LCD_WriteInt(LCD_GRAPH_HOME_ADDR + LCD_WIDTH * y ,0x24);
 371                  LCD_Comm(0xb0);
 372                  for(i=0;i<LCD_WIDTH;i++)
 373                          LCD_AutoWrite(0xff);
 374                  LCD_Comm(0xb2);
 375          }
 376          */
 377          /*
 378          void LCD_LineV(uchar x,uchar y1,uchar y2) 
 379          {
 380                  int i;
 381                  //LCD_CE(0);
 382                  for(i = y1; i < y2; i++)
 383                  {
 384                          LCD_Putpixel(x,i);              
 385                  }
 386          }
 387          */
 388          
 389          void LCD_Rectange(uchar x1,uchar y1,uchar x2,uchar y2)
 390          {
 391   1              lcdcmd[0] = CMDO_LCD_RECT;
 392   1              lcdcmd[1] = x1;
 393   1              lcdcmd[2] = y1;
 394   1              lcdcmd[3] = x2+1;
 395   1              lcdcmd[4] = y2+1;                
 396   1              sendcmd(5);
 397   1      }                        
 398          void LCD_PrintChar(uchar cmd, uchar x,uchar y,uchar *s)
 399          {                
 400   1              uchar pos = 0;        
 401   1              lcdcmd[0] = cmd;
 402   1              lcdcmd[1] = x;
 403   1              lcdcmd[2] = y;
 404   1              pos = 1;
 405   1              while(*s)
 406   1              {      
 407   2                      lcdcmd[(uchar)(pos + 3)] = *s++;
 408   2                      pos = pos + 1;
 409   2              }      
 410   1              lcdcmd[(uchar)(pos+3)] = 0x00;
 411   1              lcdcmd[3] = pos;
 412   1              pos = pos + 4;
 413   1              sendcmd(pos);
 414   1      }
 415          void LCD_PrintHz12(uchar x,uchar y,uchar *s)
 416          {                     
 417   1              LCD_PrintChar(CMDO_LCD_HZ12,x,y,s);
 418   1      }
 419          void LCD_PrintHz16(uchar x,uchar y,uchar *s)
 420          {
 421   1              LCD_PrintChar(CMDO_LCD_HZ16,x,y,s);
 422   1      }
 423          //显示6x8的数字
 424          void LCD_Print6X8(uchar x, uchar y,uchar *s)
 425          {                                  
 426   1              LCD_PrintChar(CMDO_LCD_68,x,y,s);
 427   1      }
C51 COMPILER V7.01  LCD                                                                    12/30/2014 10:26:50 PAGE 8   

 428          
 429          //显示6x8的数字
 430          void LCD_Print8X16(uchar x, uchar y,uchar *s)
 431          {                                
 432   1              LCD_PrintChar(CMDO_LCD_816,x,y,s);
 433   1      }
 434          
 435          //显示24x32的数字
 436          
 437          void LCD_Print24X32(uchar x, uchar y,uchar *s)
 438          {
 439   1              LCD_PrintChar(CMDO_LCD_2432,x,y,s);
 440   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    925    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     60      46
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

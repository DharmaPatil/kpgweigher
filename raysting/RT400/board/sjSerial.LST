C51 COMPILER V7.01  SJSERIAL                                                               12/30/2014 10:26:49 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE SJSERIAL
OBJECT MODULE PLACED IN sjSerial.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE sjSerial.c LARGE OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "sjSerial.h"
   2          #include "sjDefine.h"
   3          //#include "reg52.h"
   4          #include <stdio.h>
   5          
   6          BYTE spbuf[SP_BUFFER_MAX];      ///< serial port fifo buffer
   7          static BYTE *spHead,*spTail;    ///< buffer head and tailst
   8          static BYTE spSFlag;///<serial port flag for send use
   9          
  10          BYTE spbuf2[SP_BUFFER_MAX];     ///< serial port fifo buffer
  11          static BYTE *spHead2,*spTail2;  ///< buffer head and tailst
  12          static BYTE spSFlag2;///<serial port flag for send use
  13          
  14          //const for SerialPort Status
  15          #define SPBUSY  0xd6    
  16          #define SPIDLE  0xd8
  17          
  18          
  19              
  20          void InitCOM1(void)             //9600bps@11.0592MHz
  21          {
  22   1              ACC = P_SW1;
  23   1          ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
  24   1          P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
  25   1              SCON = 0x50;            //8bit data, no parity
  26   1              AUXR |= 0x40;           //1T of Fosc
  27   1              AUXR &= 0xFE;           //timer1 to com1
  28   1              TMOD &= 0x0F;           //16bit reload
  29   1              TL1 = (65536 - (FOSC/4/BAUD1));   //????????
  30   1          TH1 = (65536 - (FOSC/4/BAUD1))>>8;
  31   1              //TL1 = 0xE8;   TH1 = 0xFF;             //115200 @11.0592MHz
  32   1              //TL1 = 0xD0;   TH1 = 0xFF;     //57600 @11.0592MHz     
  33   1              //TL1 = 0xE0;   TH1 = 0xFE;     //9600, @11.0592MHz
  34   1              //TL1 = 0x80;   TH1 = 0xFB;     //2400, @11.0592MHz
  35   1              TR1 = 1;                    //start timer1
  36   1          ES = 1;                     //enable serial port interrupt
  37   1          
  38   1              //ET1 = 0;              //disable interrupt
  39   1      }
  40          
  41          void InitCOM2(void)             //57600bps@11.0592MHz
  42          {
  43   1              P_SW2 |= S2_S0;     //S2_S0=1 (P4.6/RxD2_2, P4.7/TxD2_2)
  44   1              S2CON = 0x50;           //8bit data
  45   1              AUXR |= 0x14;           //1T to Fosc
  46   1              T2L = (65536 - (FOSC/4/BAUD2));   //????????
  47   1          T2H = (65536 - (FOSC/4/BAUD2))>>8;
  48   1              //TL2 = 0xE8;   TH2 = 0xFF;     //115200 @11.0592MHz
  49   1              //TL2 = 0xD0;   TH2 = 0xFF;     //57600 @11.0592MHz     
  50   1              //TL2 = 0xE0;   TH2 = 0xFE;     //9600, @11.0592MHz
  51   1              //TL2 = 0x80;   TH2 = 0xFB;     //2400, @11.0592MHz
  52   1      
  53   1      }
  54          
  55          
C51 COMPILER V7.01  SJSERIAL                                                               12/30/2014 10:26:49 PAGE 2   

  56          
  57          
  58          
  59          /********************************
  60          *       Add the byte recieved to the 
  61          *       Tail of the buffer
  62          ********************************/
  63          void sjSerialHandler(void) interrupt 4 using 2
  64          {
  65   1              //just handle serial interrupt 1
  66   1              if(TI)
  67   1              {
  68   2                      TI = 0;
  69   2                      spSFlag = SPIDLE;       
  70   2              }
  71   1              if(RI)
  72   1              {
  73   2                      *spTail = SBUF;
  74   2                      spTail = spTail+1;
  75   2                      if(spTail == (spbuf+SP_BUFFER_MAX))
  76   2                              spTail = spbuf;
  77   2                      RI = 0;
  78   2              }
  79   1      }
  80          
  81          /********************************
  82          *       Add the byte recieved to the 
  83          *       Tail of the buffer
  84          ********************************/
  85          extern void kbd_uart_push(uchar);
  86          void sjSerialHandler2(void) interrupt 8 using 3
  87          {
  88   1              //just handle serial interrupt 1
  89   1              if(S2CON & S2TI)
  90   1              {
  91   2                      S2CON &= ~S2TI;
  92   2                      spSFlag2 = SPIDLE;      
  93   2              }
  94   1              if (S2CON & S2RI)
  95   1              {
  96   2                      *spTail2 = S2BUF;
  97   2                      S2CON &= ~S2RI;
  98   2                      kbd_uart_push(*spTail2);
  99   2                      /*
 100   2                      spTail2 = spTail2 + 1;
 101   2                      if(spTail2 == (spbuf2+SP_BUFFER_MAX))
 102   2                              spTail2 = spbuf2;
 103   2                      */
 104   2                      
 105   2              }
 106   1      }
 107          /**
 108          *       @return TRUE when data availabel ,FALSE while not
 109          */
 110          BYTE sjSerialIsDataWaiting()
 111          {
 112   1              if(spHead == spTail)
 113   1                      return 0;
 114   1              if(spTail > spHead)
 115   1                      return spTail-spHead;
 116   1      
 117   1              return spTail+SP_BUFFER_MAX-spHead;
C51 COMPILER V7.01  SJSERIAL                                                               12/30/2014 10:26:49 PAGE 3   

 118   1      }
 119          /**
 120          *       Send One Byte on Serial port , (under construction)
 121          *       and return with no wait for send finished
 122          *       @param udata the Byte to send
 123          *       @param PortID serial port to use
 124          */
 125          void sjSerialSendByte(BYTE udata)
 126          {
 127   1              spSFlag=SPBUSY;
 128   1              //Send the udata
 129   1              SBUF = udata;
 130   1              while(spSFlag == SPBUSY)        
 131   1                      ;
 132   1      }
 133          /**
 134          *       Wait One Byte until that appeared,
 135          *       it perform read byte function at the same time
 136          *       @param PortID serial port to use
 137          *       @return Byte we received
 138          */
 139          BYTE sjSerialWaitForOneByte()
 140          {
 141   1              BYTE udata;
 142   1              while(spHead == spTail) 
 143   1              {
 144   2              }
 145   1              udata = *spHead;
 146   1              spHead = spHead+1;
 147   1              if(spHead == (spbuf+SP_BUFFER_MAX))
 148   1                      spHead = spbuf;
 149   1              return udata;
 150   1      }
 151          
 152          //=================COM 2 related functions
 153          /**
 154          *       @return TRUE when data availabel ,FALSE while not
 155          */
 156          BYTE sjSerialIsDataWaiting2()
 157          {
 158   1              if(spHead2 == spTail2)
 159   1                      return 0;
 160   1              if(spTail2 > spHead2)
 161   1                      return spTail2-spHead2;
 162   1      
 163   1              return spTail2 + SP_BUFFER_MAX-spHead;
 164   1      }
 165          /**
 166          *       Send One Byte on Serial port , (under construction)
 167          *       and return with no wait for send finished
 168          *       @param udata the Byte to send
 169          *       @param PortID serial port to use
 170          */
 171          void sjSerialSendByte2(BYTE udata)
 172          {
 173   1              spSFlag2=SPBUSY;
 174   1              //Send the udata
 175   1              S2BUF = udata;
 176   1              while(spSFlag2 == SPBUSY)       
 177   1                      ;
 178   1      }
 179          
C51 COMPILER V7.01  SJSERIAL                                                               12/30/2014 10:26:49 PAGE 4   

 180          /**
 181          *       Wait One Byte until that appeared,
 182          *       it perform read byte function at the same time
 183          *       @param PortID serial port to use
 184          *       @return Byte we received
 185          
 186          BYTE sjSerialWaitForOneByte2()
 187          {
 188                  BYTE udata;
 189                  while(spHead2 == spTail2)       
 190                  {
 191                  }
 192                  udata = *spHead2;
 193                  spHead2 = spHead2 + 1;
 194                  if(spHead2 == (spbuf2 + SP_BUFFER_MAX))
 195                          spHead2 = spbuf2;
 196                  return udata;
 197          }
 198          */
 199          /**
 200          *       @brief Set Initially for all serial port(under construction)
 201          *       
 202          *       Serial port format will be set identically
 203          */
 204          void sjSerialInit()
 205          {
 206   1              spHead=spbuf;
 207   1              spTail=spbuf;
 208   1              spSFlag=SPIDLE;
 209   1      
 210   1              spHead2=spbuf2;
 211   1              spTail2=spbuf2;
 212   1              spSFlag2=SPIDLE;
 213   1      
 214   1              InitCOM1();
 215   1              InitCOM2();
 216   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    618    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     78    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

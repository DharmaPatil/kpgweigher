C51 COMPILER V7.01  WINDOW                                                                 01/03/2015 16:00:47 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE WINDOW
OBJECT MODULE PLACED IN window.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE window.c LARGE OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "window.h"
   2          #include "lcd.h"
   3          #include "stdio.h"
   4          #include "stdlib.h"
   5          //#include "sjDefine.h"
   6          //MSG_HANDLER curr_window = 0;             
   7          
   8          
   9          extern uchar pos_databuf;     
  10          extern uchar data_sign;
  11          extern u8 databuf[12];
  12          
  13          /*¼ÆËã×Ö·û´®³¤¶È*/
  14          uchar strlen(uchar *s)
  15          {
  16   1              uchar len = 0;
  17   1              while(*s++) len ++;
  18   1              
  19   1              return len;
  20   1      }
  21          
  22          double buf2double()      
  23          {                  
  24   1              return atof(databuf);
  25   1              /*
  26   1         double tmp = 0.0;
  27   1         uchar i = 0;
  28   1         uchar pos = 0;
  29   1         for(i=1;i<pos_databuf;i++) {
  30   1            if(databuf[i] != KEY_DOT)
  31   1               tmp = tmp * 10.0+(databuf[i] - '0');
  32   1            else
  33   1               pos = pos_databuf - i - 2;
  34   1         }
  35   1         while(pos > 0) {
  36   1            tmp = tmp / 10.0;
  37   1            pos--;
  38   1         }                                        
  39   1         if(data_sign == 1)
  40   1                 tmp = -tmp;
  41   1                return tmp;
  42   1                */
  43   1      }
  44          int buf2byte()       //convert rundata.tempbuf to byte (00-99)
  45          {       
  46   1              return atoi(databuf);
  47   1              /*
  48   1         int tmp = 0;
  49   1         uchar i;
  50   1         for(i=0;i<pos_databuf;i++) {
  51   1            tmp = tmp * 10+(databuf[i] - '0');
  52   1         }
  53   1         return tmp;
  54   1         */
  55   1      }
C51 COMPILER V7.01  WINDOW                                                                 01/03/2015 16:00:47 PAGE 2   

  56          
  57          
  58          
  59          extern uchar key;
  60          u8 strbuf[12];
  61          u8 databuf[12];
  62          u8 pos_databuf; //position in data buffer
  63          u8 max_databuf;
  64          u8 data_sign;   // sign of the data
  65          LABEL code datalbl = {LBL_HZ16,10,10,8,strbuf};
  66          LABEL code datalbl2 = {LBL_HZ6X8,140,54,8,"DN:'E'"};
  67          LABEL code datalbl3 = {LBL_HZ6X8,140,54,8,"UP/DN:'A'-'Z'"};
  68          LABEL code databox = {LBL_HZ16,20,30,9,databuf};
  69          
  70          
  71          uchar wnd_intinput(uchar lastval)
  72          {
  73   1              uchar msg;
  74   1              
  75   1              key = MSG_INIT;
  76   1              databuf[0] = '\0';
  77   1              pos_databuf = 0;
  78   1              data_sign = 0;  
  79   1              while(1)
  80   1              {
  81   2                      if(key != KEY_INVALID)
  82   2                      {
  83   3                              msg = key;
  84   3                              
  85   3                      }else{
  86   3                              continue;
  87   3                      }
  88   2                      if(msg == MSG_INIT)
  89   2                      {
  90   3                              LCD_Cls();
  91   3                              draw_label(&datalbl,SW_NORMAL);
  92   3                              draw_inputbox(&databox, TRUE);
  93   3      //                      LCD_ShowCursor(databox.x,databox.y);
  94   3      
  95   3                      }
  96   2      
  97   2                      if(msg == KEY_TAB)
  98   2                      {
  99   3                      /*
 100   3                              if(pos_databuf < max_databuf)
 101   3                              {
 102   3                                      databuf[pos_databuf++] = '0';
 103   3                                      databuf[pos_databuf] = '\0';
 104   3                                      msg = MSG_REFRESH;
 105   3                              }
 106   3                      */
 107   3                      }
 108   2                      
 109   2                      if(msg == KEY_DN) {
 110   3                      /*
 111   3                              if(pos_databuf == 0)
 112   3                              {
 113   3                                      databuf[pos_databuf++] = '0';
 114   3                                      databuf[pos_databuf] = '\0';
 115   3                              }
 116   3      
 117   3                              if(databuf[pos_databuf-1] == '0')
C51 COMPILER V7.01  WINDOW                                                                 01/03/2015 16:00:47 PAGE 3   

 118   3                                      databuf[pos_databuf-1] = '9';
 119   3                              else
 120   3                                      databuf[pos_databuf-1] -= 1;
 121   3                              msg = MSG_REFRESH;
 122   3                      */
 123   3                      }
 124   2                      if(msg == KEY_UP) {
 125   3                      /*
 126   3                              if(pos_databuf == 0)
 127   3                              {
 128   3                                      databuf[pos_databuf++] = '0';
 129   3                                      databuf[pos_databuf] = '\0';
 130   3                              }
 131   3      
 132   3                              if(databuf[pos_databuf-1] == '9')
 133   3                                      databuf[pos_databuf-1] = '0';
 134   3                              else
 135   3                                      databuf[pos_databuf-1] += 1;
 136   3                              msg = MSG_REFRESH;
 137   3                      */
 138   3                      }
 139   2                      if(msg >= KEY_NUM0 && msg <= KEY_NUM9) {
 140   3                              if(pos_databuf < max_databuf)
 141   3                              {
 142   4                                      databuf[pos_databuf++] = msg;
 143   4                                      databuf[pos_databuf] = '\0';
 144   4                                      msg = MSG_REFRESH;
 145   4                              }
 146   3                      }
 147   2                      if(msg == KEY_CE) {
 148   3      //                      LCD_HideCursor();
 149   3                              key = KEY_INVALID;
 150   3                              return lastval;
 151   3                      }
 152   2                      if(msg == KEY_OK){
 153   3      //                      LCD_HideCursor();
 154   3                              key = KEY_INVALID;
 155   3                              return buf2byte();
 156   3                      }
 157   2                      if(msg == MSG_REFRESH) {
 158   3                              draw_label(&databox,SW_NORMAL);
 159   3      //                      LCD_ShowCursor(databox.x+pos_databuf*16,databox.y);
 160   3                      }       
 161   2                      key = KEY_INVALID;
 162   2              }
 163   1      }
 164          
 165          void draw_box(LABEL *lbl);
 166          double wnd_floatinput(double lastval)
 167          {
 168   1              uchar msg;
 169   1      
 170   1              databuf[0] = '+';
 171   1          databuf[1] = '\0';
 172   1          pos_databuf = 1;
 173   1          data_sign = 0;      
 174   1              max_databuf = 8;
 175   1              key = MSG_INIT;
 176   1              while(1)
 177   1              {
 178   2                      if(key != KEY_INVALID)
 179   2                      {
C51 COMPILER V7.01  WINDOW                                                                 01/03/2015 16:00:47 PAGE 4   

 180   3                              msg = key;
 181   3              
 182   3                      }else{
 183   3                              continue;
 184   3                      }
 185   2                      if(msg == MSG_INIT)
 186   2                      {
 187   3      //                      LCD_Cls();
 188   3      //                      draw_label(&datalbl,SW_NORMAL);
 189   3      //                      draw_label(&datalbl2,SW_NORMAL);
 190   3                              draw_box(&databox);
 191   3                              sprintf(databuf,"        ");
 192   3                              msg = MSG_REFRESH;
 193   3      //                      draw_inputbox(&databox,TRUE);
 194   3      //                      LCD_ShowCursor(databox.x,databox.y);
 195   3                      }
 196   2      
 197   2                      if(msg == KEY_TAB)
 198   2                      {                                          
 199   3                              msg = MSG_REFRESH;
 200   3                      }
 201   2                      /*
 202   2                      if(msg == KEY_UP) {                                
 203   2                              if(pos_databuf == 1)
 204   2                              {              
 205   2                                      if((data_sign & 0x01) == 0)      //no sign
 206   2                                      {
 207   2                                              databuf[0] = '-';
 208   2                                              data_sign |= 0x01;
 209   2                                      }else{
 210   2                                              databuf[0] = '+';       //
 211   2                                              data_sign ^= 0x01;
 212   2                                      }
 213   2                              }else{
 214   2                                      if((pos_databuf < max_databuf) && (databuf[pos_databuf-2] == 'E'))
 215   2                                      {                          
 216   2                                              if((data_sign & 0x08) == 0)         
 217   2                                              {
 218   2                                                      databuf[pos_databuf-1] = '-';
 219   2                                                      data_sign |= 0x08;
 220   2                                              }else{
 221   2                                                      databuf[pos_databuf-1] = '+';
 222   2                                                      data_sign ^= 0x08;
 223   2                                              }
 224   2                                      }        
 225   2                                      msg = MSG_REFRESH;
 226   2                              }
 227   2                              msg = MSG_REFRESH;
 228   2                      }
 229   2                      
 230   2                      if(msg == KEY_DN) {
 231   2                              if((pos_databuf < max_databuf) && ((data_sign & 0x04) == 0))    //no E in string
 232   2                              {
 233   2                                      databuf[pos_databuf++] = 'E';
 234   2                                      databuf[pos_databuf++] = '+';
 235   2                                      databuf[pos_databuf] = '\0';                      
 236   2                                      data_sign |= 0x04;
 237   2                                      msg = MSG_REFRESH;
 238   2                              }
 239   2                      
 240   2                              msg = MSG_REFRESH;
 241   2                      }
C51 COMPILER V7.01  WINDOW                                                                 01/03/2015 16:00:47 PAGE 5   

 242   2              */                              
 243   2                      if( msg == KEY_DOT)
 244   2                      {
 245   3                              if((pos_databuf < max_databuf) && ((data_sign & 0x02) == 0))      //no dot in string
 246   3                              {
 247   4                                      databuf[pos_databuf++] = msg;
 248   4                                      databuf[pos_databuf] = '\0';                      
 249   4                                      data_sign |= 0x02;
 250   4                                      msg = MSG_REFRESH;
 251   4                              }
 252   3      
 253   3                      }
 254   2                      if((msg >= KEY_NUM0 && msg <= KEY_NUM9)) {
 255   3                              if(pos_databuf < max_databuf)
 256   3                              {
 257   4                                      databuf[pos_databuf++] = msg;
 258   4                                      databuf[pos_databuf] = '\0';
 259   4                                      msg = MSG_REFRESH;
 260   4                              }
 261   3                      }
 262   2                      if(msg == KEY_CE) {
 263   3      //                      LCD_HideCursor();
 264   3                              key = KEY_INVALID;
 265   3                              return lastval;
 266   3                      }
 267   2                      if(msg == KEY_OK){
 268   3                                      key = KEY_INVALID;
 269   3      //                      LCD_HideCursor();
 270   3                              return buf2double();
 271   3                      }
 272   2                      if(msg == MSG_REFRESH) {
 273   3                              draw_label(&databox,SW_NORMAL|SW_OVERLAP);
 274   3                              msg = KEY_INVALID;
 275   3      //                      LCD_ShowCursor(databox.x+pos_databuf*16,databox.y);
 276   3                      }                                 
 277   2                      key = KEY_INVALID;
 278   2              }
 279   1      }
 280          //display a message box
 281          void wnd_msgbox(LABEL *lbl)
 282          {
 283   1              LCD_ClsBlock(lbl->x - 10,lbl->y - 3,lbl->x + lbl->width * 16 -14 , lbl->y+19);
 284   1              draw_label(lbl, SW_NORMAL);     
 285   1              LCD_Rectange(lbl->x - 10,lbl->y - 3,lbl->x + lbl->width * 16 -14, lbl->y+19);
 286   1              LCD_Rectange(lbl->x - 8,lbl->y - 1,lbl->x + lbl->width * 16 - 16 , lbl->y+17);
 287   1      
 288   1      }
 289          
 290          //display a message box
 291          void wnd_msgbox2(LABEL *lbl)
 292          {
 293   1              draw_label(lbl, SW_NORMAL | SW_OVERLAP);        
 294   1              LCD_Rectange(lbl->x - 8,lbl->y - 1,lbl->x + lbl->width * 16 - 16 , lbl->y+17);
 295   1      }
 296          
 297          void draw_box(LABEL *lbl)
 298          {
 299   1              LCD_Rectange(lbl->x - 10,lbl->y - 3,lbl->x + lbl->width * 16 -14, lbl->y+19);
 300   1      //      LCD_Rectange(lbl->x - 8,lbl->y - 1,lbl->x + lbl->width * 16 - 16 , lbl->y+17);
 301   1      }
 302          void draw_inputbox(LABEL *lbl,BOOL redraw)
 303          {
C51 COMPILER V7.01  WINDOW                                                                 01/03/2015 16:00:47 PAGE 6   

 304   1              if(redraw)
 305   1              {
 306   2                      LCD_ClsBlock(lbl->x - 10,lbl->y - 3,lbl->x + lbl->width * 16 , lbl->y+19);
 307   2                      LCD_Rectange(lbl->x - 10,lbl->y - 3,lbl->x + lbl->width * 16 , lbl->y+19);
 308   2              }
 309   1              draw_label(lbl, SW_NORMAL);     
 310   1      }
 311          
 312          void draw_label(LABEL *lbl,uchar reverse) {
 313   1              uchar len = lbl->width;
 314   1      
 315   1              if(lbl->type == LBL_HZ6X8) {
 316   2                      if(reverse & SW_NORMAL) {
 317   3                              if((reverse & SW_OVERLAP) == 0)
 318   3                                      LCD_ClsBlock( lbl->x, lbl->y, lbl->x + (len<<3), lbl->y + 8);
 319   3      
 320   3                              LCD_Print6X8( lbl->x, lbl->y, lbl->param);
 321   3                              return;                 
 322   3                      }
 323   2                      if(reverse & SW_REVERSE)
 324   2                              LCD_ReverseRect(lbl->x, lbl->y, len , 8);
 325   2                      return;
 326   2              }
 327   1              if(lbl->type == LBL_HZ8X16) {
 328   2                      if(reverse & SW_NORMAL) {
 329   3                              if((reverse & SW_OVERLAP) == 0)
 330   3                                      LCD_ClsBlock( lbl->x, lbl->y, lbl->x + (len<<3), lbl->y + 16);
 331   3                              LCD_Print8X16( lbl->x, lbl->y, lbl->param);
 332   3                              return;
 333   3                      }
 334   2                      if(reverse & SW_REVERSE)
 335   2                              LCD_ReverseRect(lbl->x, lbl->y, len * 1, 16);
 336   2                      return;
 337   2              }
 338   1              
 339   1              if(lbl->type == LBL_HZ24X32) {
 340   2                      if(lbl->param[0] == '-') //using small -
 341   2                              lbl->param[0] = '~';
 342   2                      if(reverse & SW_NORMAL) {
 343   3                              if((reverse & SW_OVERLAP) == 0)
 344   3                                      LCD_ClsBlock( lbl->x, lbl->y, lbl->x + len * 24, lbl->y + 32);
 345   3                              LCD_Print24X32( lbl->x, lbl->y, lbl->param);
 346   3                      }
 347   2                      if(reverse & SW_REVERSE)
 348   2                              LCD_ReverseRect(lbl->x, lbl->y, len * 3, 32);
 349   2                      return;
 350   2              }
 351   1              
 352   1              if(lbl->type == LBL_HZ12) {
 353   2                      if(reverse & SW_NORMAL) {
 354   3                              if((reverse & SW_OVERLAP) == 0)
 355   3                                      LCD_ClsBlock( lbl->x, lbl->y, lbl->x + (len<<4), lbl->y + 12);
 356   3                              LCD_PrintHz12( lbl->x, lbl->y, lbl->param);
 357   3                      }
 358   2                      if(reverse & SW_REVERSE)
 359   2                              LCD_ReverseRect(lbl->x, lbl->y, len * 2, 12);
 360   2                      return;
 361   2              }
 362   1              if(lbl->type == LBL_HZ16) {
 363   2                      if(reverse & SW_NORMAL) {
 364   3                              if((reverse & SW_OVERLAP) == 0)
 365   3                                      LCD_ClsBlock( lbl->x, lbl->y, lbl->x + (len<<4), lbl->y + 16);
C51 COMPILER V7.01  WINDOW                                                                 01/03/2015 16:00:47 PAGE 7   

 366   3                              LCD_PrintHz16( lbl->x, lbl->y, lbl->param);
 367   3                      }
 368   2                      if(reverse & SW_REVERSE)
 369   2                              LCD_ReverseRect(lbl->x, lbl->y, len * 2, 16);
 370   2                      return;
 371   2              }
 372   1      }
 373          
 374          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1840    ----
   CONSTANT SIZE    =     74    ----
   XDATA SIZE       =     27      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

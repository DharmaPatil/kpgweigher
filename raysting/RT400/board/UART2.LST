C51 COMPILER V7.01  UART2                                                                  12/30/2014 10:26:50 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE UART2
OBJECT MODULE PLACED IN UART2.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE UART2.C LARGE OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "sjDefine.h"
   2          // UART.C
   3          //
   4          // Generic software uart written in C, requiring a timer set to 3 times
   5          // the baud rate, and two software read/write pins for the receive and
   6          // transmit functions.
   7          //
   8          // * Received characters are buffered
   9          // * putchar(), getchar(), io_hasc() and flush_input_buffer() are available
  10          // * There is a facility for background processing while waiting for input
  11          //
  12          // Colin Gittins, Software Engineer, Halliburton Energy Services
  13          //
  14          // The baud rate can be configured by changing the BAUD_RATE2 macro as
  15          // follows:
  16          //
  17          //
  18          // The function init_uart() must be called before any comms can take place
  19          //
  20          // Interface routines required:
  21          // 1. get_rx2_pin_status()
  22          //    Returns 0 or 1 dependent on whether the receive pin is high or low.
  23          // 2. set_tx2_pin_high()
  24          //    Sets the transmit pin to the high state.
  25          // 3. set_tx2_pin_low()
  26          //    Sets the transmit pin to the low state.
  27          // 4. idle()
  28          //    Background functions to execute while waiting for input.
  29          // 5. timer_set( BAUD_RATE )
  30          //    Sets the timer to 3 times the baud rate.
  31          // 6. set_timer_interrupt( timer_isr )
  32          //    Enables the timer interrupt.
  33          //
  34          // Functions provided:
  35          // 1. void flush_input_buffer( void )
  36          //    Clears the contents of the input buffer.
  37          // 2. char io_hasc( void )
  38          //    Tests whether an input character has been received.
  39          // 3. char getchar( void )
  40          //    Reads a character from the input buffer, waiting if necessary.
  41          // 4. void turn_rx2_on( void )
  42          //    Turns on the receive function.
  43          // 5. void turn_rx2_off( void )
  44          //    Turns off the receive function.
  45          // 6. void putchar( char )
  46          //    Writes a character to the serial port.
  47          
  48          #include <stdio.h>
  49          
  50          
  51          sbit asp_rx2 = P3^4; //rx of simulated serial port2
  52          sbit asp_tx2 = P3^5; //tx of simulated serial port2
  53          
  54          
  55          
C51 COMPILER V7.01  UART2                                                                  12/30/2014 10:26:50 PAGE 2   

  56          #define IN_BUF_SIZE 32
  57          
  58          
  59          static pdata unsigned char inbuf2[IN_BUF_SIZE];
  60          static unsigned char qin2 = 0;
  61          static unsigned char qout2 = 0;
  62          /*****************************************************
  63          Interface Routine for I/O analog serial port (UART.C)
  64          (added by songj)
  65          // 1. get_rx2_pin_status()
  66          //    Returns 0 or 1 dependent on whether the receive pin is high or low.
  67          // 2. set_tx2_pin_high()
  68          //    Sets the transmit pin to the high state.
  69          // 3. set_tx2_pin_low()
  70          //    Sets the transmit pin to the low state.
  71          // 4. idle()
  72          //    Background functions to execute while waiting for input.
  73          // 5. timer_set( BAUD_RATE2 )
  74          //    Sets the timer to 3 times the baud rate.
  75          // 6. set_timer_interrupt( timer_isr )
  76          //    Enables the timer interrupt.
  77          
  78          ******************************************************/
  79          
  80          #define get_rx2_pin_status()            asp_rx2
  81          
  82          #define set_tx2_pin_high()      asp_tx2 = 1
  83          
  84          #define set_tx2_pin_low()       asp_tx2 = 0
  85          
  86          #define turn_rx2_on()   flag_rx2_off = FALSE
  87          
  88          #define turn_rx2_off()  flag_rx2_off = TRUE
  89          
  90          
  91          void idle2()
  92          {
  93   1      
  94   1      }
  95          
  96          
  97          
  98          
  99          static char  flag_rx2_waiting_for_stop_bit;
 100          static char  flag_rx2_off;
 101          static BYTE  rx2_mask;
 102          static char  flag_rx2_ready;
 103          static char  flag_tx2_ready;
 104          static char  timer_rx2_ctr;
 105          static char  timer_tx2_ctr;
 106          static char  bits_left_in_rx2;
 107          static char  bits_left_in_tx2;
 108          static char  rx2_num_of_bits;
 109          static char  tx2_num_of_bits;
 110          static BYTE  internal_rx2_buffer;
 111          //static char  internal_tx2_buffer;
 112          static WORD  internal_tx2_buffer;
 113          static BYTE user_tx2_buffer;
 114          
 115          static BYTE mask;
 116          static char start_bit, flag_in;
 117          
C51 COMPILER V7.01  UART2                                                                  12/30/2014 10:26:50 PAGE 3   

 118          
 119          void asp_handler2()
 120          {
 121   1              // Transmitter Section
 122   1              if ( flag_tx2_ready )
 123   1              {
 124   2                      if ( --timer_tx2_ctr<=0 )
 125   2                      {
 126   3                              mask = internal_tx2_buffer& 0x0001;
 127   3                              internal_tx2_buffer >>= 1;
 128   3                              if ( mask )
 129   3                              {
 130   4                                      set_tx2_pin_high();
 131   4                              }
 132   3                              else
 133   3                              {
 134   4                                      set_tx2_pin_low();
 135   4                              }
 136   3                              timer_tx2_ctr = 3;
 137   3                              if ( --bits_left_in_tx2<=0 )
 138   3                              {
 139   4                                      flag_tx2_ready = FALSE;
 140   4                              }
 141   3                      }
 142   2              }
 143   1              // Receiver Section
 144   1              if ( flag_rx2_off==FALSE )
 145   1              {
 146   2                      if ( flag_rx2_waiting_for_stop_bit )
 147   2                      {
 148   3                              if ( --timer_rx2_ctr<=0 )
 149   3                              {
 150   4                                      flag_rx2_waiting_for_stop_bit = FALSE;
 151   4                                      flag_rx2_ready = FALSE;
 152   4                                      internal_rx2_buffer &= 0xFF;
 153   4                                      if ( internal_rx2_buffer!=0xC2 )
 154   4                                      {       
 155   5                                              inbuf2[qin2] = internal_rx2_buffer;
 156   5                                              if ( ++qin2>=IN_BUF_SIZE )
 157   5                                              {
 158   6                                                      qin2 = 0;
 159   6                                              }
 160   5                                      }       
 161   4                              }
 162   3                      }
 163   2                      else // rx2_test_busy
 164   2                      {
 165   3                              if ( flag_rx2_ready==FALSE )
 166   3                              {
 167   4                                      start_bit = get_rx2_pin_status();
 168   4                                      // Test for Start Bit
 169   4                                      if ( start_bit==0 )
 170   4                                      {
 171   5                                              flag_rx2_ready = TRUE;
 172   5                                              internal_rx2_buffer = 0;
 173   5                                              timer_rx2_ctr = 4;
 174   5                                              bits_left_in_rx2 = rx2_num_of_bits;
 175   5                                              rx2_mask = 1;
 176   5                                      }
 177   4                              }
 178   3                              else // rx2_busy
 179   3                              {
C51 COMPILER V7.01  UART2                                                                  12/30/2014 10:26:50 PAGE 4   

 180   4                                      if ( --timer_rx2_ctr<=0 )
 181   4                                      { 
 182   5                                              // rcv
 183   5                                              timer_rx2_ctr = 3;
 184   5                                              flag_in = get_rx2_pin_status();
 185   5                                              if ( flag_in )
 186   5                                              {
 187   6                                                      internal_rx2_buffer |= rx2_mask;
 188   6                                              }
 189   5                                              rx2_mask <<= 1;
 190   5                                              if ( --bits_left_in_rx2<=0 )
 191   5                                              {
 192   6                                                      flag_rx2_waiting_for_stop_bit = TRUE;
 193   6                                              }
 194   5                                      }
 195   4                              }
 196   3                      }
 197   2              }
 198   1      }
 199          
 200          void init_uart2( void )
 201          {
 202   1              asp_tx2 = 1;//set the asp_tx2 to be output pin
 203   1              if(asp_rx2);//set the asp_rx2 to be input pin
 204   1      
 205   1              flag_tx2_ready = FALSE;
 206   1              flag_rx2_ready = FALSE;
 207   1              flag_rx2_waiting_for_stop_bit = FALSE;
 208   1              flag_rx2_off = FALSE;
 209   1              rx2_num_of_bits = 8;//8 data ,one stop ,no check
 210   1              tx2_num_of_bits = 10;//8 data,one stop ,no check
 211   1      
 212   1              set_tx2_pin_low();
 213   1      
 214   1              turn_rx2_on();//enable I/O serial
 215   1      
 216   1              qin2 = 0;
 217   1              qout2 = 0;
 218   1      
 219   1      }
 220          
 221          BYTE io_getc2( void )
 222          {
 223   1              BYTE ch;
 224   1      
 225   1              do
 226   1              {
 227   2                      while ( qout2==qin2 )
 228   2                      {
 229   3                              idle2();        
 230   3                      }
 231   2                      ch = inbuf2[qout2] & 0xFF;
 232   2                      if ( ++qout2>=IN_BUF_SIZE )
 233   2                      {
 234   3                              qout2 = 0;
 235   3                      }
 236   2              }
 237   1              while (ch==0xC2);
 238   1              return( ch );
 239   1      }
 240          
 241          void io_putc2( char ch )
C51 COMPILER V7.01  UART2                                                                  12/30/2014 10:26:50 PAGE 5   

 242          {
 243   1              while ( flag_tx2_ready );
 244   1              user_tx2_buffer = ch;
 245   1      
 246   1              // invoke_UART_transmit
 247   1              timer_tx2_ctr = 3;
 248   1              bits_left_in_tx2 = tx2_num_of_bits;
 249   1              internal_tx2_buffer = (user_tx2_buffer<<1) | 0x200;
 250   1              flag_tx2_ready = TRUE;
 251   1      }
 252          
 253          
 254          unsigned char io_hasc2( void )
 255          {
 256   1              if(qin2 ==qout2)
 257   1                      return 0;
 258   1              if(qin2 > qout2)
 259   1                      return qin2-qout2;
 260   1              return qin2+IN_BUF_SIZE -qout2;
 261   1      }
 262          
 263          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    439    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     20    ----
   PDATA SIZE       =     32    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

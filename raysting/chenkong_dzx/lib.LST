C51 COMPILER V7.01  LIB                                                                    06/29/2008 11:48:12 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE LIB
OBJECT MODULE PLACED IN lib.OBJ
COMPILER INVOKED BY: c:\GreenTools\Keil\C51\BIN\C51.EXE lib.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "lib.h"
   2          /*
   3          void sleepus(BYTE j){
   4           while(j-- > 0);
   5          }
   6          
   7          void sleepms(BYTE j){
   8           BYTE i;
   9           while(j-- > 0){
  10                  i = 255;
  11                  while(i-- > 0) ;
  12           }
  13          }
  14          void sleeps(BYTE j){
  15           while(j-- > 0){
  16                  sleepms(255);
  17           }
  18          }
  19          */
  20          
  21          void ledout_refresh(LED_INFO code *info) reentrant
  22          {
  23   1              u8 dat,i,j,tick;
  24   1              tick = 0;
  25   1              do{
  26   2                      for(i = 0;i < (*info).number;i++)
  27   2                      {
  28   3                              dat = (*info).m_leddata[i];
  29   3                              j = dat & 0xC0;
  30   3                              dat = (*info).m_code[0x3f & dat];
  31   3      
  32   3                              if( ( ((*((*info).m_flash))>>4) == i) && ( ((*((*info).m_flash))&0x0f) > 0) && (dat & 0x40))
  33   3                              {
  34   4                                      if(tick < (*info).m_flash_msec)
  35   4                                              dat = (*info).m_code[LED_NOSHOW_INDEX];
  36   4      
  37   4                                      if(tick > ((*info).m_flash_msec << 1)){
  38   5                                              (*((*info).m_flash))--;
  39   5                                              tick = 0;
  40   5                                      }
  41   4                                      tick++;
  42   4                              }
  43   3                              if(j & 0x80)    //handle point case
  44   3                                      dat &= (*info).m_point_code;
  45   3                              else
  46   3                                      dat |= ~(*info).m_point_code;
  47   3                              led_output(i,dat);
  48   3                      }
  49   2              }while(0);
  50   1      }
  51          
  52          void led_print(LED_INFO code *info,u8 *str,u8 size) 
  53          {
  54   1              if(size > (*info).number)
  55   1                      return;
C51 COMPILER V7.01  LIB                                                                    06/29/2008 11:48:12 PAGE 2   

  56   1              size=(*info).number-size;
  57   1              while(size < (*info).number){
  58   2                      if(((*str) >= '0') && ((*str) <= '9')){
  59   3                              (*info).m_leddata[size] = ((*info).m_leddata[size] & 0x40) | (*str)-'0'; //reserve flash flag
  60   3                      }else{
  61   3                               if((*str) == '-'){
  62   4                                              (*info).m_leddata[size] = ((*info).m_leddata[size] & 0x40) | 0x0b; //reserve flash flag;
  63   4                               }else{
  64   4                                          if((*str) == '.'){
  65   5                                                              if(size > 0){
  66   6                                                                      (*info).m_leddata[size-1] |= 0x80; //set point flag to 1
  67   6                                                                      size--;
  68   6                                                              }
  69   5                                              }else{
  70   5                                                      (*info).m_leddata[size] = LED_NOSHOW_INDEX; //no show
  71   5                                              }
  72   4                              }
  73   3                      }
  74   2                      str++;
  75   2                      size++;
  76   2              }
  77   1      }
  78          
  79          /**********************Main starts here******************/
  80          /*********************************************************
  81          *Parallel keyboard scan
  82          *       NOTE: 
  83          *               : each bit represent a key, when pressed , it will return value 
  84          *               : 
  85          **********************************************************/
  86          u8 _pkbd_check()
  87          {
  88   1              u8 i;
  89   1              i = 0;
  90   1              if(0 == pkbd_up)        i |= PKBD_CH_UP;
  91   1              if(0 == pkbd_dn)        i |= PKBD_CH_DN;
  92   1              if(0 == pkbd_cu)        i |= PKBD_CH_CU;
  93   1              if(0 == pkbd_pt)        i |= PKBD_CH_PT;
  94   1              if(0 == pkbd_1k)        i |= PKBD_CH_1K;
  95   1      
  96   1              return i;
  97   1      }
  98          
  99          u8 pkey_id = 0;
 100          u8 p_processed=0;
 101          u16 pkbd_timer = 0;
 102          #define PKBD_REPEAT     24000   //300 ms to ensure a repeat button
 103          #define PKBD_WAIT       20      //30 ms to remove noise
 104          #define PKBD_PROCESS_IDLE       0
 105          #define PKBD_PROCESS_DONE       1
 106          #define PKBD_PROCESS_WAIT       2
 107          u8 PKeyboard_Update()
 108          {
 109   1          /* scan the keyboard */
 110   1              pkey_id = _pkbd_check();
 111   1              if(pkey_id == 0)  {
 112   2                              p_processed = PKBD_PROCESS_IDLE;
 113   2                              pkbd_timer = 0;
 114   2                              return 0;
 115   2              }
 116   1              if(p_processed == PKBD_PROCESS_DONE)
 117   1              {
C51 COMPILER V7.01  LIB                                                                    06/29/2008 11:48:12 PAGE 3   

 118   2                      if(pkbd_timer > 0)
 119   2                              return 0;
 120   2                      pkbd_timer = PKBD_REPEAT;
 121   2                      p_processed = PKBD_PROCESS_IDLE;
 122   2                      return 0;
 123   2              }
 124   1          //there is a key press down
 125   1          if((pkbd_timer == 0) && (p_processed == PKBD_PROCESS_IDLE)){
 126   2                      pkbd_timer = PKBD_WAIT;
 127   2                      p_processed = PKBD_PROCESS_WAIT;
 128   2                      return 0;
 129   2              }
 130   1              if(pkbd_timer > 0)
 131   1                      return 0;
 132   1              if(p_processed != PKBD_PROCESS_WAIT)
 133   1                      return 0;
 134   1      
 135   1          if(pkey_id == _pkbd_check()) 
 136   1          {           //there is really a key press down
 137   2                      p_processed = PKBD_PROCESS_DONE;
 138   2                      pkbd_timer = 0;
 139   2                      return pkey_id;
 140   2              }
 141   1      }
 142          
 143          
 144          
 145          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    851    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V7.01  SJMAIN                                                                 07/09/2011 16:38:13 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE SJMAIN
OBJECT MODULE PLACED IN sjMain.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE sjMain.c OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "sjDefine.h"
   2          #include "sjSerial.h"
   3          #include <stdio.h>
   4          
   5          //the MARK of header ender and error and quest and reset
   6          #define  HMARK 0x55     //U
   7          #define  EMARK 0x56 //V
   8          #define  QMARK 0x57 //W
   9          #define  RMARK 0x58 //X
  10            
  11          //the length of the switch table ,
  12          //which must lower than 3fh
  13          #define  LINIT 17 
  14          
  15          //for P1 output
  16          //for P0 output
  17          const unsigned char code tbl[8]={0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE};
  18          
  19          
  20          
  21          
  22          //for Init use(regaddr of pc)
  23          const unsigned char code inittbl[LINIT]={
  24                  0x33, 0x21,0x32,0x02,0x25,0x24,0x2e,
  25                  0x1f,0x20,0x42,0x40,0x00,0x01,0x2f,0x2b,0x23,0x35       
  26          
  27          };
  28          
  29          //when modification is applied,
  30          //no address should be modified ,just set the mcu addr= 256,
  31          //and add new item in mcuaddr
  32          //C? IT IS SO EASY ,
  33          //BUT ,A NEW REGISTER MODEL WILL BE APPLIED IN THE FUTURE.
  34          /*          board allocation (F,O)=P0*8+P1
  35                          48,49   50,51   52,53   54,55   57,56   59,58   61,60   63,62   //HPo,HNo,??,HP0,H8,H7,STo,STi
  36                          33,32   35,34   37,36   39,38   41,40   43,42   45,44   47,46   //HN4,HP4,HN3,HP3,HN6,HP6,HN5,HP5
  37                          17,16   19,18   21,20   23,22   25,24   27,26   29,28   31,30   //KN4,KN3,KN2,KN1,H9,FX1,KTT,KN5
  38                          0,1             2,3             4,5             6,7             9,8             11,10   13,12   15,14   //H2,H1,HX2,HX1,KI4,KI3,KI2,KI1
  39          const unsigned char pcaddr[] ={
  40                          0x16,0x14,0x26,0x24,0x01,0x00,0x31,0x11,0x32,0x17,//FHP 0-9 (pc addr)
  41                          0x1f,0x1d,0x2f,0x2d,0x08,0x09,0x38,0x18,0x3b,0x1e,//OHP 10-19 (pc addr)
  42                          0x15,0x13,0x27,0x25,0x12,0x10,                                    //FHN 20-25  (pc addr)
  43                          0x1c,0x1a,0x2e,0x2c,0x1b,0x19,                                    //OHN 26-31  (pc addr)
  44                          0x06,0x07,0x04,0x05,0x02,0x03,                                    //FKN 32-37  (pc addr)
  45                          0x0f,0x0e,0x0d,0x0c,0x0b,0x0a,                                    //OKN 38-42  (pc addr)
  46                          0x37,0x36,0x35,0x34,                                                      //FKI 44-47      (pc addr)
  47                          0x3e,0x3f,0x3c,0x3d,                                                      //OKI 48-51      (pc addr)
  48                          0x23,0x20,0x21,0x33,0x22,0x30,                                    //FHX1,FHX2,FFX1,PKTT,FSTI,FSTO 52-57  (pc addr)
  49                          0x2a,0x29,0x28,0x3a,0x2b,0x39,                                    //OHX1,OHX2,OFX1,NKTT,OSTI,OSTO, 58-63 (pc addr)
  50                          0x41,0x40,0x43,0x42};                                                     //FHPO,OHP0,FHNO,OHNO  (pc addr)
  51          const unsigned char mcuaddr[] ={
  52                       54,  2     ,  0,   39,      35,  47,  43,  59,  57, 25,   //FHP 0-9 (pc addr)
  53                           55,  3 ,  1,   38,      34,  46,  42,  58,      56, 24,   //OHP 10-19 (pc addr)
  54                           255, 255,  37,  33,  45,   41,                                    //FHN 20-25  (pc addr)
  55                           255, 255,  36,  32,  44,   40,                    //OHN 26-31  (pc addr)
C51 COMPILER V7.01  SJMAIN                                                                 07/09/2011 16:38:13 PAGE 2   

  56                           23,   21,  19,  17,  31,  255,                                    //FKN 32-37  (pc addr) ?(54)
  57                           22,   20,  18,  16,  30,  255,                    //OKN 38-42  (pc addr) ?(55)
  58                           15,   13,  11,  9,                                                                //FKI 44-47     (pc addr)
  59                           14,   12,  10,  8,                                                                //OKI 48-51     (pc addr)
  60                           6,   4,   27,  29,  63,  61,                                      //FHX1,FHX2,FFX1,PKTT,FSTI,FSTO 52-57  (pc addr)
  61                           7,   5,   26,  28,  62,  60,                                      //OHX1,OHX2,OFX1,NKTT,OSTI,OSTO, 58-63 (pc addr)
  62                           48,  49,  50,  51};                                                       //FHPO,OHP0,FHNO,OHNO  (pc addr)
  63          
  64          */
  65          const unsigned char code lut[]={
  66          /*****05-1-25 8:44****
  67          47,35,31,255,19,17,23,21,  //0-7
  68          34,46,255,30,16,18,20,22,  //8-f
  69          41,59,45,255,2,255,54,25,  //10-17
  70          58,40,255,44,255,3,24,55,  //18-1f
  71          4,27,63,6,39,33,0,37,      //20-27
  72          26,5,7,62,32,38,36,1,      //28-2f
  73          61,43,57,29,9,11,13,15,    //30-37
  74          42,60,28,56,10,8,14,12,    //38-3f 
  75          49,48,51,50                                //40-43
  76          **********************/
  77          /*****05-1-25 8:44****/
  78          43,47,31,255,19,17,23,21,  //0-7  
  79          46,42,255,30,16,18,20,22,  //8-f
  80          41,57,45,255,0,255,2,54,  //10-17
  81          56,40,255,44,255,1,55,3,  //18-1f
  82          4,27,63,6,35,33,39,37,      //20-27
  83          26,5,7,62,32,34,36,38,      //28-2f
  84          61,59,25,29,9,11,13,15,    //30-37
  85          58,60,28,24,10,8,14,12,    //38-3f 
  86          49,48,51,50                                //40-43
  87          /**********************/
  88          };
  89          
  90          extern void turn_rx_on( void );
  91          extern void turn_rx_off( void );
  92          extern void flush_input_buffer( void );
  93          extern void ioputchar(char ch);
  94          extern char iogetchar();
  95          extern char kbhit( void );
  96          extern void init_uart( void );
  97          unsigned char delayc;
  98          
  99          //delay loop
 100          void swiDelay(unsigned char dl1,unsigned char dl2)
 101          {
 102   1              unsigned char i,j;
 103   1              for(i=0;i<dl1;i++)
 104   1                      for(j=0;j<dl2;j++)
 105   1                              ;
 106   1      }
 107          
 108          
 109          void swiAction(unsigned char SwiID)
 110          {
 111   1              unsigned char exID;
 112   1      
 113   1              if(SwiID >= sizeof(lut))
 114   1                      return;
 115   1      
 116   1              exID = lut[SwiID];
 117   1              if(exID == 255)
C51 COMPILER V7.01  SJMAIN                                                                 07/09/2011 16:38:13 PAGE 3   

 118   1                      return;
 119   1      
 120   1              P1 = tbl[(exID&7)];
 121   1              P0 = tbl[(exID>>3)];
 122   1              swiDelay(0x1f,0xff);
 123   1      
 124   1              P1 = 0xff;
 125   1              P0 = 0xff;
 126   1              swiDelay(0x03,0xff);
 127   1      }
 128          void swiReset()
 129          {
 130   1              unsigned char i;
 131   1              for(i=0;i<LINIT;i++)
 132   1              {
 133   2                      swiAction(inittbl[i]);
 134   2              }
 135   1      }
 136          
 137          /*****************************************************
 138          Interface Routine for I/O analog serial port (UART.C)
 139          (added by songj)
 140          // 1. get_rx_pin_status()
 141          //    Returns 0 or 1 dependent on whether the receive pin is high or low.
 142          // 2. set_tx_pin_high()
 143          //    Sets the transmit pin to the high state.
 144          // 3. set_tx_pin_low()
 145          //    Sets the transmit pin to the low state.
 146          // 4. idle()
 147          //    Background functions to execute while waiting for input.
 148          // 5. timer_set( BAUD_RATE )
 149          //    Sets the timer to 3 times the baud rate.
 150          // 6. set_timer_interrupt( timer_isr )
 151          //    Enables the timer interrupt.
 152          
 153          ******************************************************/
 154          unsigned char get_rx_pin_status()
 155          {
 156   1              return asp_rx;
 157   1      }
 158          void set_tx_pin_high()
 159          {
 160   1              asp_tx = 1;
 161   1      }
 162          void set_tx_pin_low()
 163          {
 164   1              asp_tx = 0;
 165   1      }
 166          void idle()
 167          {
 168   1      
 169   1      }
 170          
 171          //end interface routine
 172          void main()
 173          {
 174   1              unsigned char temp;
 175   1              unsigned char sid;//id of serial to send 
 176   1      
 177   1              IE = 0;//close int
 178   1      
 179   1              sjSerialInit();
C51 COMPILER V7.01  SJMAIN                                                                 07/09/2011 16:38:13 PAGE 4   

 180   1              
 181   1      
 182   1              //set serial port parameter (clock 11.0592M)
 183   1              //9600 baut rate 8 data non parity and 1 stop.
 184   1              SCON = 0x70;
 185   1              PCON = 0x00;
 186   1              //timer count
 187   1              TH1 = 0xfd;
 188   1              //use timer 1 to be serial
 189   1              //use timer 0 to be analog I/O
 190   1              TMOD = 0x22;
 191   1              TR1 = 1;
 192   1      
 193   1              init_uart();
 194   1              turn_rx_on();//enable I/O serial
 195   1              flush_input_buffer();
 196   1              IE = 0x92;//enable serial int and timer0 interrupt//IE=90
 197   1              sid = 0;
 198   1              
 199   1              asp_tx = 1;//set the asp_tx to be output pin
 200   1              if(asp_rx);//set the asp_rx to be input pin
 201   1      
 202   1      //      sjSerialSendByte('?');
 203   1              swiReset();
 204   1              /*
 205   1              *       Protocal routine: 
 206   1              *       1.      HMARK sid(!=HMARK) :set sid
 207   1              *   2.  normal HMARK is repeated
 208   1              */
 209   1              swiDelay(0x0f,0xff);
 210   1      //      sjSerialSendByte('!');
 211   1      
 212   1              while(1)
 213   1              {
 214   2                      if(sjSerialIsDataWaiting())
 215   2                      {
 216   3                              temp = sjSerialWaitForOneByte();
 217   3                              if(temp == HMARK)
 218   3                              {
 219   4                                      temp = sjSerialWaitForOneByte();                
 220   4                                      if(temp != HMARK)
 221   4                                      {
 222   5                                              sid = temp;
 223   5                                              continue;
 224   5                                      }
 225   4                              }
 226   3                              if(sid == 's')//send to switch
 227   3                              {
 228   4                                      if(temp == HMARK)
 229   4                                      {
 230   5                                              while(1)
 231   5                                              {
 232   6                                                      temp = sjSerialWaitForOneByte();
 233   6                                                      if(temp == EMARK)
 234   6                                                              break;
 235   6                                                      if(temp == RMARK)
 236   6                                                      {
 237   7                                                              swiReset();
 238   7                                                              continue;
 239   7                                                      }
 240   6                                                      if(temp == QMARK)
 241   6                                                              continue;
C51 COMPILER V7.01  SJMAIN                                                                 07/09/2011 16:38:13 PAGE 5   

 242   6                                                      swiAction(temp);
 243   6                                              }
 244   5                                              sjSerialSendByte(HMARK);
 245   5                                              temp = P2;
 246   5                                              sjSerialSendByte(temp);
 247   5                                              temp = P3;
 248   5      /*
 249   5                                              temp = 0;
 250   5                                              if(P3^4)
 251   5                                                      temp |= (0x10);
 252   5                                              if(P3^5)
 253   5                                                      temp |= (0x20);
 254   5      */
 255   5                                              sjSerialSendByte(temp);
 256   5                                              sjSerialSendByte(EMARK);
 257   5                                      }
 258   4                              }
 259   3                              if(sid == 'n')//send to navmeter
 260   3                              {
 261   4                                      ioputchar(temp);
 262   4                              }
 263   3                              if(sid == 't')
 264   3                              {
 265   4                                      P0=sjSerialWaitForOneByte();
 266   4                                      P1=sjSerialWaitForOneByte();
 267   4                                      sjSerialSendByte(EMARK);
 268   4                              }
 269   3                      }
 270   2                      if(kbhit())
 271   2                      {
 272   3                              temp = iogetchar();
 273   3                              sjSerialSendByte(temp);
 274   3                      }
 275   2              }
 276   1      }
 277          
 278          
 279          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    306    ----
   CONSTANT SIZE    =     93    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V7.01  UART                                                                   07/09/2011 16:38:13 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN UART.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE UART.C OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "reg52.h"
   2          // UART.C
   3          //
   4          // Generic software uart written in C, requiring a timer set to 3 times
   5          // the baud rate, and two software read/write pins for the receive and
   6          // transmit functions.
   7          //
   8          // * Received characters are buffered
   9          // * putchar(), getchar(), kbhit() and flush_input_buffer() are available
  10          // * There is a facility for background processing while waiting for input
  11          //
  12          // Colin Gittins, Software Engineer, Halliburton Energy Services
  13          //
  14          // The baud rate can be configured by changing the BAUD_RATE macro as
  15          // follows:
  16          //
  17          // #define BAUD_RATE 19200.0
  18          //
  19          // The function init_uart() must be called before any comms can take place
  20          //
  21          // Interface routines required:
  22          // 1. get_rx_pin_status()
  23          //    Returns 0 or 1 dependent on whether the receive pin is high or low.
  24          // 2. set_tx_pin_high()
  25          //    Sets the transmit pin to the high state.
  26          // 3. set_tx_pin_low()
  27          //    Sets the transmit pin to the low state.
  28          // 4. idle()
  29          //    Background functions to execute while waiting for input.
  30          // 5. timer_set( BAUD_RATE )
  31          //    Sets the timer to 3 times the baud rate.
  32          // 6. set_timer_interrupt( timer_isr )
  33          //    Enables the timer interrupt.
  34          //
  35          // Functions provided:
  36          // 1. void flush_input_buffer( void )
  37          //    Clears the contents of the input buffer.
  38          // 2. char kbhit( void )
  39          //    Tests whether an input character has been received.
  40          // 3. char getchar( void )
  41          //    Reads a character from the input buffer, waiting if necessary.
  42          // 4. void turn_rx_on( void )
  43          //    Turns on the receive function.
  44          // 5. void turn_rx_off( void )
  45          //    Turns off the receive function.
  46          // 6. void putchar( char )
  47          //    Writes a character to the serial port.
  48          
  49          #include <stdio.h>
  50          
  51          extern unsigned char get_rx_pin_status();
  52          extern void set_tx_pin_low();
  53          extern void set_tx_pin_high();
  54          extern void timer_set(int baud_rate);
  55          extern void idle();
C51 COMPILER V7.01  UART                                                                   07/09/2011 16:38:13 PAGE 2   

  56          
  57          #define BAUD_RATE 9600//19200.0
  58          
  59          #define IN_BUF_SIZE 32
  60          
  61          #define TRUE 1
  62          #define FALSE 0
  63          
  64          static unsigned char inbuf[IN_BUF_SIZE];
  65          static unsigned char qin = 0;
  66          static unsigned char qout = 0;
  67          
  68          static char  flag_rx_waiting_for_stop_bit;
  69          static char  flag_rx_off;
  70          static char  rx_mask;
  71          static char  flag_rx_ready;
  72          static char  flag_tx_ready;
  73          static char  timer_rx_ctr;
  74          static char  timer_tx_ctr;
  75          static char  bits_left_in_rx;
  76          static char  bits_left_in_tx;
  77          static char  rx_num_of_bits;
  78          static char  tx_num_of_bits;
  79          static char  internal_rx_buffer;
  80          //static char  internal_tx_buffer;
  81          static int  internal_tx_buffer;
  82          static char user_tx_buffer;
  83          
  84          void timer_isr(void) interrupt 1 using 3
  85          {
  86   1              char mask, start_bit, flag_in;
  87   1      
  88   1              // Transmitter Section
  89   1              if ( flag_tx_ready )
  90   1              {
  91   2                      if ( --timer_tx_ctr<=0 )
  92   2                      {
  93   3                              mask = internal_tx_buffer&1;
  94   3                              internal_tx_buffer >>= 1;
  95   3                              if ( mask )
  96   3                              {
  97   4                                      set_tx_pin_high();
  98   4                              }
  99   3                              else
 100   3                              {
 101   4                                      set_tx_pin_low();
 102   4                              }
 103   3                              timer_tx_ctr = 3;
 104   3                              if ( --bits_left_in_tx<=0 )
 105   3                              {
 106   4                                      flag_tx_ready = FALSE;
 107   4                              }
 108   3                      }
 109   2              }
 110   1              // Receiver Section
 111   1              if ( flag_rx_off==FALSE )
 112   1              {
 113   2                      if ( flag_rx_waiting_for_stop_bit )
 114   2                      {
 115   3                              if ( --timer_rx_ctr<=0 )
 116   3                              {
 117   4                                      flag_rx_waiting_for_stop_bit = FALSE;
C51 COMPILER V7.01  UART                                                                   07/09/2011 16:38:13 PAGE 3   

 118   4                                      flag_rx_ready = FALSE;
 119   4                                      internal_rx_buffer &= 0xFF;
 120   4                                      if ( internal_rx_buffer!=0xC2 )
 121   4                                      {       
 122   5                                              inbuf[qin] = internal_rx_buffer;
 123   5                                              if ( ++qin>=IN_BUF_SIZE )
 124   5                                              {
 125   6                                                      qin = 0;
 126   6                                              }
 127   5                                      }       
 128   4                              }
 129   3                      }
 130   2                      else // rx_test_busy
 131   2                      {
 132   3                              if ( flag_rx_ready==FALSE )
 133   3                              {
 134   4                                      start_bit = get_rx_pin_status();
 135   4                                      // Test for Start Bit
 136   4                                      if ( start_bit==0 )
 137   4                                      {
 138   5                                              flag_rx_ready = TRUE;
 139   5                                              internal_rx_buffer = 0;
 140   5                                              timer_rx_ctr = 4;
 141   5                                              bits_left_in_rx = rx_num_of_bits;
 142   5                                              rx_mask = 1;
 143   5                                      }
 144   4                              }
 145   3                              else // rx_busy
 146   3                              {
 147   4                                      if ( --timer_rx_ctr<=0 )
 148   4                                      { 
 149   5                                              // rcv
 150   5                                              timer_rx_ctr = 3;
 151   5                                              flag_in = get_rx_pin_status();
 152   5                                              if ( flag_in )
 153   5                                              {
 154   6                                                      internal_rx_buffer |= rx_mask;
 155   6                                              }
 156   5                                              rx_mask <<= 1;
 157   5                                              if ( --bits_left_in_rx<=0 )
 158   5                                              {
 159   6                                                      flag_rx_waiting_for_stop_bit = TRUE;
 160   6                                              }
 161   5                                      }
 162   4                              }
 163   3                      }
 164   2              }
 165   1              TF0 = 0;
 166   1      }
 167          
 168          void init_uart( void )
 169          {
 170   1              flag_tx_ready = FALSE;
 171   1              flag_rx_ready = FALSE;
 172   1              flag_rx_waiting_for_stop_bit = FALSE;
 173   1              flag_rx_off = FALSE;
 174   1              rx_num_of_bits = 8;//8 data ,one stop ,no check
 175   1              tx_num_of_bits = 10;//8 data,one stop ,no check
 176   1      
 177   1              set_tx_pin_low();
 178   1      
 179   1      //  Sets the timer 1 to 3 times the baud rate(9600).(clock 11.0592M)
C51 COMPILER V7.01  UART                                                                   07/09/2011 16:38:13 PAGE 4   

 180   1              //TH0 = 0xE0;//9600
 181   1              //TH0 = 0xC0;//4800
 182   1              TH0 = 0x80;//2400
 183   1              //TH0 = 0;//1200
 184   1              TR0= 1;
 185   1      //sojo commented timer_set( BAUD_RATE );
 186   1      
 187   1      //sojo commented set_timer_interrupt( timer_isr );  // Enable timer interrupt
 188   1      }
 189          
 190          char iogetchar( void )
 191          {
 192   1              char ch;
 193   1      
 194   1              do
 195   1              {
 196   2                      while ( qout==qin )
 197   2                      {
 198   3                              idle(); 
 199   3                      }
 200   2                      ch = inbuf[qout] & 0xFF;
 201   2                      if ( ++qout>=IN_BUF_SIZE )
 202   2                      {
 203   3                              qout = 0;
 204   3                      }
 205   2              }
 206   1              while ( ch==0x0A || ch==0xC2 );
 207   1              return( ch );
 208   1      }
 209          
 210          void ioputchar( char ch )
 211          {
 212   1              while ( flag_tx_ready );
 213   1              user_tx_buffer = ch;
 214   1      
 215   1              // invoke_UART_transmit
 216   1              timer_tx_ctr = 3;
 217   1              bits_left_in_tx = tx_num_of_bits;
 218   1              internal_tx_buffer = (user_tx_buffer<<1) | 0x200;
 219   1              flag_tx_ready = TRUE;
 220   1      }
 221          
 222          void flush_input_buffer( void )
 223          {
 224   1              qin = 0;
 225   1              qout = 0;
 226   1      }
 227          
 228          char kbhit( void )
 229          {
 230   1              return( qin!=qout );
 231   1      }
 232          
 233          void turn_rx_on( void )
 234          {
 235   1              flag_rx_off = FALSE;
 236   1      }
 237          /*
 238          void turn_rx_off( void )
 239          {
 240                  flag_rx_off = TRUE;
 241          }
C51 COMPILER V7.01  UART                                                                   07/09/2011 16:38:13 PAGE 5   

 242          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    348    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     49       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

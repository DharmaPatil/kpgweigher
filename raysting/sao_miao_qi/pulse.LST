C51 COMPILER V7.01  PULSE                                                                  09/09/2007 16:45:54 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE PULSE
OBJECT MODULE PLACED IN pulse.OBJ
COMPILER INVOKED BY: c:\GreenTools\Keil\C51\BIN\C51.EXE pulse.c ROM(SMALL) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          //#include "reg51.h" 
   2          #include "stdio.h"
   3          #include "sjSerial.h"
   4          
   5          //#define MYDEBUG
   6          #define DBG     sjSerialSendByte
   7          #define tx_byte DBG
   8          void tx_byte2(unsigned char a);
   9          //the length of the switch table,
  10          /*
  11                  row 4 column 8
  12                          P0              
  13          
  14          P1      col0    col1     col2    col3    col4   col5   col6    col7   
  15                          ----    ----     ----    ----    ----   ----   ----    ----
  16          row0_on | 0|    | 1|     | 2|    | 3|    | 4|   | 5|   | 6|    | 7|
  17                          | A|     | B|    | C|    | D|   | E|   | F|    | G|    | H|
  18          row1_off| 8|    | 9|     |10|    |11|    |12|   |13|   |14|    |15|
  19                          ----    ----     ----    ----    ----   ----   ----    ----
  20          
  21                          ----    ----     ----    ----    ----   ----   ----    ----
  22          row2_on |16|    |17|     |18|    |19|    |20|   |21|   |22|    |23|
  23                          | I|     | J|    | K|    | L|   | M|   | N|    | O|    | P|
  24          row3_off|24|    |25|     |26|    |27|    |28|   |29|   |30|    |31|
  25                          ----    ----     ----    ----    ----   ----   ----    ----
  26          
  27                          ----    ----     ----    ----    ----   ----   ----    ----
  28          row4_on |32|    |33|     |34|    |35|    |36|   |37|   |38|    |39|
  29                          | Q|     | R|    | S|    | T|   | U|   | V|    | W|    | X|
  30          row5_off|40|    |41|     |42|    |43|    |44|   |45|   |46|    |47|
  31                          ----    ----     ----    ----    ----   ----   ----    ----
  32                          
  33                          ----    ----     ----    ----    ----   ----   ----    ----
  34          row6_on |48|    |49|     |50|    |51|    |52|   |53|   |54|    |55|
  35                          | Y|     | Z|    | a|    | b|   | c|   | d|    | e|    | f|
  36          row7_off|56|    |57|     |58|    |59|    |60|   |61|   |62|    |63|
  37                          ----    ----     ----    ----    ----   ----   ----    ----
  38                          
  39          */
  40          
  41          #define  LINIT 32 
  42          
  43          #define FALSE   0
  44          #define TRUE    1
  45          /********************
  46          *Parallel keyboard scan
  47          *       NOTE: 
  48          *               : each bit represent a key, when pressed , it will turn to 0
  49          *               : the press key value will be stored in pkey_id,
  50          *               : DELAY_TIME*timer_period = time to erase the disturbance
  51          *********************/
  52          #define PKEY_DELAY_TIME 1
  53          
  54          // loop of check the key id
  55          // return none zero if there is a valid key id
C51 COMPILER V7.01  PULSE                                                                  09/09/2007 16:45:54 PAGE 2   

  56          // return 0xff if there is no valid keyid
  57          BOOL _pkbd_check();
  58          unsigned char _pkbd_keyid();
  59          unsigned char pkeyboard_update()
  60          {
  61   1            /* scan the keyboard */
  62   1                static unsigned char processed=0;
  63   1                static unsigned char pkey_delay=0;
  64   1                if(FALSE == _pkbd_check())      
  65   1            {
  66   2               pkey_delay = 0;
  67   2                       processed = 0;
  68   2                       return 0xff;
  69   2            }
  70   1                //there is a key press down
  71   1            pkey_delay++;
  72   1            if( (pkey_delay > PKEY_DELAY_TIME) && !processed) 
  73   1            {
  74   2                              //there is really a key press down
  75   2                  pkey_delay = 0;
  76   2                              processed = 1;
  77   2                              return _pkbd_keyid();
  78   2              }
  79   1              return 0xff;
  80   1      }
  81          
  82          /*
  83                  Relay board related function
  84                  P1 is row, P0 is column
  85                  void swiAction(unsigned char SwiID) //turn around the switch
  86                  void swiReset()
  87          */
  88          
  89          //for P1 output
  90          //for P0 output
  91          const unsigned char code tbl[8]={0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE};
  92          
  93          //for Init use(regaddr of pc)
  94          //0 = off, 1 = on , 0xff = not exist
  95          const BOOL code inittbl[LINIT]={
  96                  0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,//A,B,C,D,E,F,G,H
  97                  0xff,0xff,0xff,0x00,0x00,0xff,0xff,0xff,//I,J,K,L,M,N,O,P,
  98                  0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,//Q,R,S,T,U,V,W,X,
  99                  0xff,0xff,0xff,0x00,0x00,0xff,0xff,0x00,//Y,Z,a,b,c,d,e,f,
 100          
 101          };
 102          #define MATCH_NUM       10
 103          const BOOL code matchtbl[2*MATCH_NUM] = {
 104                  'D'-'A','E'-'A','L'-'A','M'-'A','T'-'A','U'-'A','X'-'A','b'-'a'+26,'c'-'a'+26,'f'-'a'+26,
 105                  'G'-'A','F'-'A','O'-'A','N'-'A','W'-'A','V'-'A','P'-'A','e'-'a'+26,'d'-'a'+26,'H'-'A'};
 106          
 107          BOOL statustbl[LINIT];
 108          
 109          //delay loop
 110          void _swi_delay(unsigned char dl1,unsigned char dl2)
 111          {
 112   1              unsigned char i,j;
 113   1              for(i=0;i<dl1;i++)
 114   1                      for(j=0;j<dl2;j++)
 115   1                              ;
 116   1      }
 117          
C51 COMPILER V7.01  PULSE                                                                  09/09/2007 16:45:54 PAGE 3   

 118          void swiAction2(unsigned char SwiID);
 119          unsigned char lastID = 0xff;
 120          void swiAction(unsigned char SwiID)
 121          {
 122   1              if(lastID == SwiID)
 123   1                      return;
 124   1              if(statustbl[SwiID] == 0xff)
 125   1                      return;
 126   1      
 127   1              swiAction2(lastID); //turn off the lastID
 128   1              swiAction2(SwiID);      //turn on the SwiID
 129   1      }
 130          void swiAction2(unsigned char SwiID)
 131          {
 132   1              unsigned char i;
 133   1              //SwiID is from 0 to 31
 134   1              if(SwiID >= LINIT)
 135   1                      return;
 136   1              
 137   1              statustbl[SwiID] = 1 - statustbl[SwiID];
 138   1      
 139   1              //low 3 bit represent the row
 140   1              //high 3 bit represent the col
 141   1              P0 = tbl[(SwiID&0x07)];
 142   1              P1 = tbl[((SwiID>>2)&0x0E) + 1 - statustbl[SwiID]];
 143   1              
 144   1              _swi_delay(0x1f,0xff);
 145   1              P1 = 0xff;
 146   1              P0 = 0xff;
 147   1              _swi_delay(0x03,0xff);
 148   1      
 149   1              lastID = SwiID;
 150   1              //turn the match point
 151   1              
 152   1              for(i=0;i<MATCH_NUM;i++)
 153   1              {
 154   2                      if(SwiID == matchtbl[i])
 155   2                              break;
 156   2              }
 157   1              if(i == MATCH_NUM)
 158   1                      return;
 159   1              i = matchtbl[i+10];
 160   1              P0 = tbl[(i&0x07)];
 161   1              P1 = tbl[((i>>2)&0x0E) + 1 - statustbl[SwiID]];
 162   1              
 163   1              _swi_delay(0x1f,0xff);
 164   1              P1 = 0xff;
 165   1              P0 = 0xff;
 166   1              _swi_delay(0x03,0xff);
 167   1              
 168   1      }
 169          
 170          void swiReset()
 171          {
 172   1              unsigned char i;
 173   1              for(i=0;i<LINIT;i++)
 174   1              {
 175   2                      statustbl[i] = inittbl[i];
 176   2                      if(statustbl[i] != 0xff)
 177   2                      {
 178   3                              statustbl[i] = 1 - statustbl[i]; //turn over the status
 179   3                              swiAction2(i);
C51 COMPILER V7.01  PULSE                                                                  09/09/2007 16:45:54 PAGE 4   

 180   3                      }
 181   2              }
 182   1              lastID = 0xff;
 183   1      }
 184          
 185          unsigned char gkeyid;
 186          void timer0(void) interrupt 1
 187          {
 188   1              unsigned char m_key;
 189   1              m_key = pkeyboard_update();
 190   1              if(0xff != m_key)
 191   1              {
 192   2                      gkeyid = m_key;
 193   2                      return;
 194   2              }
 195   1      }
 196          sbit EKEY10     = P3^7;
 197          //check whether there is any key pressed 
 198          //return true if there is no key pressed
 199          //return false if there is key pressed
 200          BOOL _pkbd_check()
 201          {
 202   1          unsigned char port;
 203   1              port = P2 & 0xf0;
 204   1              if(port != 0xf0)
 205   1                      return TRUE;
 206   1              if(!EKEY10)
 207   1                      return TRUE;
 208   1      
 209   1              return FALSE;
 210   1      }
 211          //high 4 bit and EKEY10 represent the key
 212          //get the key id
 213          // return none zero if there is a valid key id
 214          // return 0 if there is no valid keyid
 215          unsigned char _pkbd_keyid()
 216          {
 217   1              unsigned char pkey_id = 0;
 218   1              unsigned char port;
 219   1              unsigned char i;
 220   1      
 221   1              port = 0x0f -((P2 & 0xf0)>>4);
 222   1              if(!EKEY10)
 223   1                      port = 0;
 224   1      
 225   1              for(i = 0;i < LINIT; i++)
 226   1              {
 227   2                      if(statustbl[i] == 0xff)
 228   2                              continue;
 229   2                      if(port == pkey_id++)
 230   2                              return i;
 231   2              }
 232   1              return 0xff;
 233   1      }
 234          void tx_byte2(unsigned char a)
 235          {
 236   1              unsigned char h,l;
 237   1              h = (a & 0xf0) >> 4;
 238   1              l = (a & 0x0f);
 239   1              if(h <= 9)              
 240   1                      tx_byte(h+'0');
 241   1              else
C51 COMPILER V7.01  PULSE                                                                  09/09/2007 16:45:54 PAGE 5   

 242   1                      tx_byte(h+'A'-0x0a);
 243   1      
 244   1              if(l <= 9)
 245   1                      tx_byte(l+'0');
 246   1              else
 247   1                      tx_byte(l+'A'-0x0a);
 248   1      
 249   1      }
 250          
 251          void initiate_timer(void)
 252          {
 253   1         //set serial port parameter (clock 11.0592M)
 254   1         //9600 baut rate 8 data non parity and 1 stop.
 255   1         SCON = 0x70;
 256   1         PCON = 0x00;
 257   1      
 258   1         //use timer 1 to be serial
 259   1         //timer count
 260   1         TH1 = 0xfd;
 261   1      
 262   1         //use timer 0 to be heart beat
 263   1         TH0 = -4608/256;   // 4608 , 4608/(11.0592M/12) = 0.005s = 5ms
 264   1         TL0 = -4608%256;
 265   1      
 266   1         TMOD = 0x21;
 267   1         TR1 = 1;
 268   1      
 269   1         ET0=1;
 270   1         EA=1;
 271   1         TR0 = 1;
 272   1      }
 273          
 274          void ledUpdate()
 275          {
 276   1              unsigned char _p2;
 277   1              unsigned char i,j;
 278   1              _p2 = P2;
 279   1              j = 0;
 280   1              for(i = 0;i < LINIT; i++)
 281   1              {
 282   2                      if(statustbl[i] == 0xff)
 283   2                              continue;
 284   2                      if(statustbl[i] == 1)           
 285   2                      {
 286   3                              //replace the low 4 bit with the id of the key
 287   3                              _p2 = (_p2 & 0xf0);
 288   3                              _p2 = _p2+(9-j);
 289   3                              P2 = _p2;
 290   3                              return;
 291   3                      }
 292   2                      j++;
 293   2              }
 294   1              //all unset case
 295   1              _p2 = (_p2 & 0xf0);
 296   1              _p2 = _p2+10;
 297   1              P2 = _p2;
 298   1              return;
 299   1              
 300   1      }
 301          //the MARK of header ender and error and quest and reset
 302          #define  HMARK 'U'
 303          
C51 COMPILER V7.01  PULSE                                                                  09/09/2007 16:45:54 PAGE 6   

 304          #define  SID_BUTTON     'B'
 305          
 306          void main(void) 
 307          {
 308   1              unsigned char bHFound;
 309   1              unsigned char inchar;
 310   1              unsigned char sid; //id of function
 311   1      
 312   1          IE = 0;//close int
 313   1              sjSerialInit(); //init buffer for serial
 314   1          /* Initiate timer */
 315   1          initiate_timer();
 316   1          swiReset();
 317   1          ledUpdate();
 318   1          IE = 0x92;//enable serial int and timer0 interrupt
 319   1      
 320   1          gkeyid = 0xff;
 321   1      
 322   1      
 323   1              /*
 324   1              *       Protocal routine: 
 325   1              *       1.      HMARK sid(!=HMARK) :set sid
 326   1              *   2.  normal HMARK is repeated
 327   1              */
 328   1              
 329   1      
 330   1              /* The major loop */ 
 331   1              bHFound = FALSE;
 332   1          inchar = 0xff;
 333   1              sid = 0xff;
 334   1              while(1)
 335   1              {
 336   2                      if(sjSerialIsDataWaiting())
 337   2                      {
 338   3                              inchar = sjSerialWaitForOneByte();
 339   3                              if(bHFound)
 340   3                              {
 341   4                                      bHFound = FALSE;
 342   4                                      if(inchar != HMARK)
 343   4                                      {
 344   5                                              sid = inchar;
 345   5                                              continue;
 346   5                                      }
 347   4                              }else{
 348   4                                      if(inchar == HMARK)
 349   4                                      {
 350   5                                              bHFound = TRUE;
 351   5                                              continue;
 352   5                                      }
 353   4                              }
 354   3                              if(sid == SID_BUTTON)//click button
 355   3                              {
 356   4                                      switch(inchar)
 357   4                                      {
 358   5                                      case '*': //reset
 359   5                                                      swiReset();
 360   5                                                      break;
 361   5                                      case '?': //query
 362   5                                                      if(EKEY10)      
 363   5                                                              DBG('1'); 
 364   5                                                      else
 365   5                                                              DBG('0');
C51 COMPILER V7.01  PULSE                                                                  09/09/2007 16:45:54 PAGE 7   

 366   5                                                      DBG(',');
 367   5                                                      tx_byte2(P2);DBG(',');DBG('|');
 368   5                                                      for(inchar = 0;inchar < LINIT; inchar++)
 369   5                                                      {
 370   6                                                              if(statustbl[inchar] == 0xff)
 371   6                                                                      continue;
 372   6                                                              DBG('0'+statustbl[inchar]);DBG(',');
 373   6                                                      }
 374   5                                                      DBG('\n');
 375   5                                                      break;
 376   5      #ifdef MYDEBUG
                                              case '0':
                                                              EKEY10 = 0;
                                                              break;
                                              case '1':
                                              case '2':
                                              case '3':
                                              case '4':
                                              case '5':
                                              case '6':
                                              case '7':
                                              case '8':
                                              case '9':
                                                              inchar = ((0x0f-inchar) <<4 ) + (P2 & 0x0f);
                                                              P2 = inchar;
              #endif
 392   5                                                      break;
 393   5      
 394   5                                      default: //click ('A' - 'Z' , 'a'-'z')
 395   5                                                      if(inchar > 'Z')
 396   5                                                              inchar = inchar - 'a'+26;
 397   5                                                      else
 398   5                                                              inchar = inchar - 'A';
 399   5                                                      if(inchar < LINIT)
 400   5                                                      {
 401   6                                                              swiAction(inchar);
 402   6                                                              ledUpdate();
 403   6                                                      }
 404   5                                      }
 405   4                              }
 406   3                      }
 407   2                      if(gkeyid != 0xff)
 408   2                      {
 409   3                              //a key is found
 410   3                              swiAction(gkeyid);
 411   3                              ledUpdate();
 412   3      
 413   3                              gkeyid = 0xff;
 414   3      #ifdef MYDEBUG
                                      inchar = P2 | 0xf0;
                                      P2 = inchar;
                                      EKEY10 = 1;
              #endif
 419   3                      }
 420   2         }
 421   1      /***********************/
 422   1      } 
 423          
 424          
 425          
 426            
 427          
C51 COMPILER V7.01  PULSE                                                                  09/09/2007 16:45:54 PAGE 8   

 428          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    694    ----
   CONSTANT SIZE    =     60    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

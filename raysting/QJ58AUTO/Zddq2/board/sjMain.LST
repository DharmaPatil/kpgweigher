C51 COMPILER V7.01  SJMAIN                                                                 09/14/2012 19:07:31 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE SJMAIN
OBJECT MODULE PLACED IN sjMain.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE sjMain.c OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include "sjDefine.h"
   2          #include "sjSerial.h"
   3          #include <stdio.h>
   4          
   5          //the MARK of header ender and error and quest and reset
   6          #define  HMARK 0x55     //U
   7          #define  EMARK 0x56 //V
   8          #define  QMARK 0x57 //W
   9          #define  RMARK 0x58 //X
  10            
  11          //the length of the switch table ,
  12          //which must lower than 3fh
  13          #define  LINIT 32 
  14          
  15          //for P1 output
  16          //for P0 output
  17          const unsigned char code tbl[8]={0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE};
  18          
  19          
  20          
  21          
  22          //for Init use(regaddr of pc)
  23          const unsigned char code inittbl[LINIT]={
  24                  0x2B, 0x39, 0x38, 0x18, 0x17, 0x1A, 0x43, 0x41, 
  25                  0x08, 0x1B, 0x09, 0x19, 0x2C, 0x26, 0x27, 0x0F, 
  26                  0x3E, 0x3F, 0x3C, 0x3D, 0x0C, 0x23, 0x20, 0x14, 
  27                  0x1F, 0x24, 0x02, 0x33, 0x21, 0x32, 0xff, 0xff
  28          
  29          
  30          /*********** 05-1-25  8:44 ****************/
  31          
  32          //  FKI1,FKI2,FKI3,OKI4,PKTT,FHP9,FHP7,FST2,
  33          //    0x37,0x36,0x35,0x3D,0x33,0x32,0x31,0x30,
  34          
  35          //  FHP3,FHN3,FHP4,FHN4,FST1,FHX1,FHX2,FFX1,  
  36          //      0x26,0x27,0x24,0x25,0x22,0x23,0x20,0x21,
  37          
  38          //  FHP10,FHP1,FHN1,FHP2,FHN2,FHN5,FHP8,FHN6,
  39          //      0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,
  40          
  41          //  FKN1,FKN2,FKN3,FKN4,FKN5,OKN6,FHP6,FHP5
  42          //      0x06,0x07,0x04,0x05,0x02,0x0A,0x00,0x01
  43          /*******************************************
  44          //  FKI1,FKI2,FKI3,OKI4,PKTT,FHP9,FHP7,FST2,
  45              0x37,0x36,0x35,0x3D,0x33,0x17,0x11,0x30,
  46          
  47          //  FHP3,FHN3,FHP4,FHN4,FST1,FHX1,FHX2,FFX1,  
  48                  0x24,0x27,0x01,0x25,0x22,0x23,0x20,0x21,
  49          
  50          //  FHP10,FHP1,FHN1,FHP2,FHN2,FHN5,FHP8,FHN6,
  51                  0x32,0x14,0x15,0x26,0x13,0x12,0x32,0x10,
  52          
  53          //  FKN1,FKN2,FKN3,FKN4,FKN5,OKN6,FHP6,FHP5
  54                  0x06,0x07,0x04,0x05,0x02,0x0A,0x31,0x00
  55          ********************************************/
C51 COMPILER V7.01  SJMAIN                                                                 09/14/2012 19:07:31 PAGE 2   

  56          };
  57          
  58          //when modification is applied,
  59          //no address should be modified ,just set the mcu addr= 256,
  60          //and add new item in mcuaddr
  61          //C? IT IS SO EASY ,
  62          //BUT ,A NEW REGISTER MODEL WILL BE APPLIED IN THE FUTURE.
  63          /*          board allocation (F,O)=P0*8+P1
  64                          48,49   50,51   52,53   54,55   57,56   59,58   61,60   63,62   //HPo,HNo,??,HP0,H8,H7,STo,STi
  65                          33,32   35,34   37,36   39,38   41,40   43,42   45,44   47,46   //HN4,HP4,HN3,HP3,HN6,HP6,HN5,HP5
  66                          17,16   19,18   21,20   23,22   25,24   27,26   29,28   31,30   //KN4,KN3,KN2,KN1,H9,FX1,KTT,KN5
  67                          0,1             2,3             4,5             6,7             9,8             11,10   13,12   15,14   //H2,H1,HX2,HX1,KI4,KI3,KI2,KI1
  68          const unsigned char pcaddr[] ={
  69                          0x16,0x14,0x26,0x24,0x01,0x00,0x31,0x11,0x32,0x17,//FHP 0-9 (pc addr)
  70                          0x1f,0x1d,0x2f,0x2d,0x08,0x09,0x38,0x18,0x3b,0x1e,//OHP 10-19 (pc addr)
  71                          0x15,0x13,0x27,0x25,0x12,0x10,                                    //FHN 20-25  (pc addr)
  72                          0x1c,0x1a,0x2e,0x2c,0x1b,0x19,                                    //OHN 26-31  (pc addr)
  73                          0x06,0x07,0x04,0x05,0x02,0x03,                                    //FKN 32-37  (pc addr)
  74                          0x0f,0x0e,0x0d,0x0c,0x0b,0x0a,                                    //OKN 38-42  (pc addr)
  75                          0x37,0x36,0x35,0x34,                                                      //FKI 44-47      (pc addr)
  76                          0x3e,0x3f,0x3c,0x3d,                                                      //OKI 48-51      (pc addr)
  77                          0x23,0x20,0x21,0x33,0x22,0x30,                                    //FHX1,FHX2,FFX1,PKTT,FSTI,FSTO 52-57  (pc addr)
  78                          0x2a,0x29,0x28,0x3a,0x2b,0x39,                                    //OHX1,OHX2,OFX1,NKTT,OSTI,OSTO, 58-63 (pc addr)
  79                          0x41,0x40,0x43,0x42};                                                     //FHPO,OHP0,FHNO,OHNO  (pc addr)
  80          const unsigned char mcuaddr[] ={
  81                       54,  2     ,  0,   39,      35,  47,  43,  59,  57, 25,   //FHP 0-9 (pc addr)
  82                           55,  3 ,  1,   38,      34,  46,  42,  58,      56, 24,   //OHP 10-19 (pc addr)
  83                           255, 255,  37,  33,  45,   41,                                    //FHN 20-25  (pc addr)
  84                           255, 255,  36,  32,  44,   40,                    //OHN 26-31  (pc addr)
  85                           23,   21,  19,  17,  31,  255,                                    //FKN 32-37  (pc addr) ?(54)
  86                           22,   20,  18,  16,  30,  255,                    //OKN 38-42  (pc addr) ?(55)
  87                           15,   13,  11,  9,                                                                //FKI 44-47     (pc addr)
  88                           14,   12,  10,  8,                                                                //OKI 48-51     (pc addr)
  89                           6,   4,   27,  29,  63,  61,                                      //FHX1,FHX2,FFX1,PKTT,FSTI,FSTO 52-57  (pc addr)
  90                           7,   5,   26,  28,  62,  60,                                      //OHX1,OHX2,OFX1,NKTT,OSTI,OSTO, 58-63 (pc addr)
  91                           48,  49,  50,  51};                                                       //FHPO,OHP0,FHNO,OHNO  (pc addr)
  92          
  93          */
  94          const unsigned char code lut[]={
  95          /*****05-1-25 8:44****
  96          47,35,31,255,19,17,23,21,  //0-7
  97          34,46,255,30,16,18,20,22,  //8-f
  98          41,59,45,255,2,255,54,25,  //10-17
  99          58,40,255,44,255,3,24,55,  //18-1f
 100          4,27,63,6,39,33,0,37,      //20-27
 101          26,5,7,62,32,38,36,1,      //28-2f
 102          61,43,57,29,9,11,13,15,    //30-37
 103          42,60,28,56,10,8,14,12,    //38-3f 
 104          49,48,51,50                                //40-43
 105          **********************/
 106          /*****05-1-25 8:44****/
 107          43,47,31,255,19,17,23,21,  //0-7  
 108          46,42,255,30,16,18,20,22,  //8-f
 109          41,57,45,53,0,255,2,54,  //10-17
 110          56,40,52,44,255,1,55,3,  //18-1f
 111          4,27,63,6,35,33,39,37,      //20-27
 112          26,5,7,62,32,34,36,38,      //28-2f
 113          61,59,25,29,9,11,13,15,    //30-37
 114          58,60,28,24,10,8,14,12,    //38-3f 
 115          49,48,51,50                                //40-43
 116          /**********************/
 117          };
C51 COMPILER V7.01  SJMAIN                                                                 09/14/2012 19:07:31 PAGE 3   

 118          
 119          extern void turn_rx_on( void );
 120          extern void turn_rx_off( void );
 121          extern void flush_input_buffer( void );
 122          extern void ioputchar(char ch);
 123          extern char iogetchar();
 124          extern char kbhit( void );
 125          extern void init_uart( void );
 126          unsigned char delayc;
 127          
 128          //delay loop
 129          void swiDelay(unsigned char dl1,unsigned char dl2)
 130          {
 131   1              unsigned char i,j;
 132   1              for(i=0;i<dl1;i++)
 133   1                      for(j=0;j<dl2;j++)
 134   1                              ;
 135   1      }
 136          
 137          
 138          void swiAction(unsigned char SwiID)
 139          {
 140   1              unsigned char exID;
 141   1      
 142   1              if(SwiID >= sizeof(lut))
 143   1                      return;
 144   1      
 145   1              exID = lut[SwiID];
 146   1              if(exID == 255)
 147   1                      return;
 148   1      
 149   1              P1 = tbl[(exID&7)];
 150   1              P0 = tbl[(exID>>3)];
 151   1              swiDelay(0x1f,0xff);
 152   1      
 153   1              P1 = 0xff;
 154   1              P0 = 0xff;
 155   1              swiDelay(0x03,0xff);
 156   1      }
 157          void swiReset()
 158          {
 159   1              unsigned char i;
 160   1              for(i=0;i<LINIT;i++)
 161   1              {
 162   2                      swiAction(inittbl[i]);
 163   2              }
 164   1      }
 165          
 166          /*****************************************************
 167          Interface Routine for I/O analog serial port (UART.C)
 168          (added by songj)
 169          // 1. get_rx_pin_status()
 170          //    Returns 0 or 1 dependent on whether the receive pin is high or low.
 171          // 2. set_tx_pin_high()
 172          //    Sets the transmit pin to the high state.
 173          // 3. set_tx_pin_low()
 174          //    Sets the transmit pin to the low state.
 175          // 4. idle()
 176          //    Background functions to execute while waiting for input.
 177          // 5. timer_set( BAUD_RATE )
 178          //    Sets the timer to 3 times the baud rate.
 179          // 6. set_timer_interrupt( timer_isr )
C51 COMPILER V7.01  SJMAIN                                                                 09/14/2012 19:07:31 PAGE 4   

 180          //    Enables the timer interrupt.
 181          
 182          ******************************************************/
 183          unsigned char get_rx_pin_status()
 184          {
 185   1              return asp_rx;
 186   1      }
 187          void set_tx_pin_high()
 188          {
 189   1              asp_tx = 1;
 190   1      }
 191          void set_tx_pin_low()
 192          {
 193   1              asp_tx = 0;
 194   1      }
 195          void idle()
 196          {
 197   1      
 198   1      }
 199          
 200          //end interface routine
 201          void main()
 202          {
 203   1              unsigned char temp;
 204   1              unsigned char sid;//id of serial to send 
 205   1              long i=1000;
 206   1              IE = 0;//close int
 207   1      
 208   1              sjSerialInit();
 209   1              
 210   1      
 211   1              //set serial port parameter (clock 11.0592M)
 212   1              //9600 baut rate 8 data non parity and 1 stop.
 213   1              SCON = 0x70;
 214   1              PCON = 0x00;
 215   1              //timer count
 216   1              TH1 = 0xfd;
 217   1              //use timer 1 to be serial
 218   1              //use timer 0 to be analog I/O
 219   1              TMOD = 0x22;
 220   1              TR1 = 1;
 221   1      
 222   1              init_uart();
 223   1              turn_rx_on();//enable I/O serial
 224   1              flush_input_buffer();
 225   1              IE = 0x92;//enable serial int and timer0 interrupt//IE=90
 226   1              sid = 0;
 227   1              
 228   1              asp_tx = 1;//set the asp_tx to be output pin
 229   1              if(asp_rx);//set the asp_rx to be input pin
 230   1      
 231   1      //      sjSerialSendByte('?');
 232   1              swiReset();
 233   1              /*
 234   1              *       Protocal routine: 
 235   1              *       1.      HMARK sid(!=HMARK) :set sid
 236   1              *   2.  normal HMARK is repeated
 237   1              */
 238   1              swiDelay(0x0f,0xff);
 239   1              
 240   1              while(1)
 241   1              {
C51 COMPILER V7.01  SJMAIN                                                                 09/14/2012 19:07:31 PAGE 5   

 242   2      
 243   2                      if(sjSerialIsDataWaiting())
 244   2                      {
 245   3                              temp = sjSerialWaitForOneByte();
 246   3                              if(temp == HMARK)
 247   3                              {
 248   4                                      temp = sjSerialWaitForOneByte();                
 249   4                                      if(temp != HMARK)
 250   4                                      {
 251   5                                              sid = temp;
 252   5                                              continue;
 253   5                                      }
 254   4                              }
 255   3                              if(sid == 's')//send to switch
 256   3                              {
 257   4                                      if(temp == HMARK)
 258   4                                      {
 259   5                                              while(1)
 260   5                                              {
 261   6                                                      temp = sjSerialWaitForOneByte();
 262   6                                                      if(temp == EMARK)
 263   6                                                              break;
 264   6                                                      if(temp == RMARK)
 265   6                                                      {
 266   7                                                              swiReset();
 267   7                                                              continue;
 268   7                                                      }
 269   6                                                      if(temp == QMARK)
 270   6                                                              continue;
 271   6                                                      swiAction(temp);
 272   6                                              }
 273   5                                              sjSerialSendByte(HMARK);
 274   5                                              temp = P2;
 275   5                                              sjSerialSendByte(temp);
 276   5                                              temp = P3;
 277   5      /*
 278   5                                              temp = 0;
 279   5                                              if(P3^4)
 280   5                                                      temp |= (0x10);
 281   5                                              if(P3^5)
 282   5                                                      temp |= (0x20);
 283   5      */
 284   5                                              sjSerialSendByte(temp);
 285   5                                              sjSerialSendByte(EMARK);
 286   5                                      }
 287   4                              }
 288   3                              if(sid == 'n')//send to navmeter
 289   3                              {
 290   4                                      ioputchar(temp);
 291   4                              }
 292   3                              if(sid == 't')
 293   3                              {
 294   4                                      P0=sjSerialWaitForOneByte();
 295   4                                      P1=sjSerialWaitForOneByte();
 296   4                                      sjSerialSendByte(EMARK);
 297   4                              }
 298   3                      }
 299   2                      if(kbhit())
 300   2                      {
 301   3                              temp = iogetchar();
 302   3                              sjSerialSendByte(temp);
 303   3                      }
C51 COMPILER V7.01  SJMAIN                                                                 09/14/2012 19:07:31 PAGE 6   

 304   2              }
 305   1      }
 306          
 307          
 308          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    316    ----
   CONSTANT SIZE    =    108    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

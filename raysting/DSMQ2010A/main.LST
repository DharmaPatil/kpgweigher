C51 COMPILER V7.01  MAIN                                                                   01/07/2011 18:30:57 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          //#include <stc89c51rc.h>
   2          #include <stc51.h>
   3          #include <intrins.h>
   4          
   5          #include "zlg7289.h"
   6          unsigned char dlyde,dlying,UART_DAT,MAIN_DAT ;
   7          unsigned char key_7289,keying,key_7289_ed ;
   8          bit  lineing;//0:2线；  1：4线。
   9          
  10          sbit ZLG7289_pinINT = P3^5; //键盘中断请求信号，低电平（负边沿）有效
  11          /*595*/
  12          sbit SER   = P2^4;  //595数据端
  13          sbit SRCLK = P2^1;  //串行数据端 
  14          sbit RCK   = P2^2;  //数据输出端 
  15          sbit KG    = P2^3;  //输出使能 
  16          sbit CLR   = P2^0;  //清零
  17          void delay(unsigned int dy)
  18          {
  19   1              unsigned int i;
  20   1              for(i=0;i<dy;i++  )
  21   1              {
  22   2                      _nop_();
  23   2                      _nop_();
  24   2                      _nop_();
  25   2                      _nop_();
  26   2                      _nop_();
  27   2      
  28   2              }
  29   1      }
  30          /***************************595继电器输出**************************/
  31          void D595(unsigned char DA1,DA2,DA3,DA4)   //74595串行移位一个数
  32          {
  33   1              unsigned char i=0;
  34   1              for (i=0;i<8;i++)
  35   1              {
  36   2                SRCLK=0;            _nop_();_nop_();_nop_();_nop_();
  37   2                SER=(bit)(DA1&0x01);_nop_(); _nop_();_nop_();_nop_();
  38   2                        DA1=DA1>>1;         _nop_(); _nop_();_nop_();_nop_();
  39   2                        SRCLK=1;            _nop_();_nop_();_nop_();_nop_();
  40   2                         } 
  41   1       
  42   1                 for (i=0;i<8;i++)
  43   1                {
  44   2                SRCLK=0;              _nop_();_nop_();_nop_();_nop_();
  45   2                SER=(bit)(DA2&0x01);  _nop_();_nop_();_nop_();_nop_();
  46   2                DA2=DA2>>1;                   _nop_();_nop_();_nop_();_nop_();
  47   2                SRCLK=1;                              _nop_();_nop_();_nop_();_nop_();
  48   2                 } 
  49   1                        
  50   1                for (i=0;i<8;i++)
  51   1                {
  52   2                SRCLK=0;                         _nop_();_nop_();_nop_();_nop_();
  53   2                SER=(bit)(DA3&0x01); _nop_();_nop_();_nop_();_nop_();
  54   2                DA3=DA3>>1;              _nop_();_nop_();_nop_();_nop_();
  55   2                SRCLK=1;                         _nop_();_nop_();_nop_();_nop_();
C51 COMPILER V7.01  MAIN                                                                   01/07/2011 18:30:57 PAGE 2   

  56   2                 }
  57   1                      
  58   1                        for (i=0;i<8;i++)
  59   1                {
  60   2                        SRCLK=0;                        _nop_();_nop_();_nop_();_nop_();
  61   2                SER=(bit)(DA4&0x01);_nop_();_nop_();_nop_();_nop_();
  62   2                DA4=DA4>>1;             _nop_();_nop_();_nop_();_nop_();
  63   2                SRCLK=1;                        _nop_();_nop_();_nop_();_nop_();
  64   2                 }
  65   1               RCK =0;
  66   1               _nop_();
  67   1               _nop_();
  68   1               RCK =1;
  69   1               KG=0;
  70   1                       delay(2500);
  71   1               KG=1; 
  72   1        
  73   1       }
  74          
  75          void int_jdq (void)
  76          {
  77   1              KG=1;    CLR=1;
  78   1      
  79   1      D595(0X2A,0X2A,0X2A,0X2A);
  80   1      
  81   1              _nop_();
  82   1      
  83   1              _nop_();
  84   1      }
  85          
  86          
  87          
  88          
  89          void dis_play( void )
  90          {
  91   1              if(keying<13|keying==25)
  92   1              {
  93   2                      ZLG7289_Reset();
  94   2                      int_jdq(); 
  95   2                      if(lineing==1)
  96   2              {
  97   3                              ZLG7289_Download(2,0,0,0x10); 
  98   3                      }else{
  99   3                              ZLG7289_Download(2,1,0,0x10);  
 100   3                      }
 101   2      }       
 102   1      switch (keying )
 103   1      {
 104   2              case 1:
 105   2                 {
 106   3                  D595(0X2C,0X2A,0X2A,0X2A); 
 107   3                  if(lineing==1)
 108   3               {ZLG7289_Download(2,0,0,0x11); }
 109   3             else     
 110   3               {ZLG7289_Download(2,0,0,0x01);
 111   4                        ZLG7289_Download(2,1,0,0x10); }}
 112   2      
 113   2                      break;
 114   2              case 2:
 115   2                 {
 116   3                  D595(0X32,0X2A,0X2A,0X2A); 
 117   3                       if(lineing==1)
C51 COMPILER V7.01  MAIN                                                                   01/07/2011 18:30:57 PAGE 3   

 118   3               {ZLG7289_Download(2,1,0,0x01); 
 119   4                        ZLG7289_Download(2,0,0,0x10);}
 120   3             else     
 121   3               {ZLG7289_Download(2,1,0,0x11); }}
 122   2                      break;
 123   2              case 3:
 124   2                  D595(0X4A,0X2A,0X2A,0X2A);
 125   2                  ZLG7289_Download(2,2,0,0x01);
 126   2                      break;
 127   2              case 4:
 128   2                  D595(0X2A,0X2C,0X2A,0X2A);
 129   2                  ZLG7289_Download(2,3,0,0x01);
 130   2                      break;
 131   2              case 5:
 132   2                  D595(0X2A,0X32,0X2A,0X2A);
 133   2                  ZLG7289_Download(2,4,0,0x01);
 134   2                      break;
 135   2              case 6:
 136   2                  D595(0X2A,0X4A,0X2A,0X2A);
 137   2                  ZLG7289_Download(2,5,0,0x01);
 138   2                      break;
 139   2              case 7:
 140   2                  D595(0X2A,0X2A,0X2C,0X2A);
 141   2                 { if(lineing==1)
 142   3               {ZLG7289_Download(2,0,0,0x12); }
 143   3             else     
 144   3               {ZLG7289_Download(2,0,0,0x02);
 145   4                        ZLG7289_Download(2,1,0,0x10);}}
 146   2                      break;
 147   2              case 8:
 148   2                   D595(0X2A,0X2A,0X32,0X2A);
 149   2                  { if(lineing==1)
 150   3               {ZLG7289_Download(2,1,0,0x02); 
 151   4                        ZLG7289_Download(2,0,0,0x10);}
 152   3             else     
 153   3               {ZLG7289_Download(2,1,0,0x12); }}
 154   2                      break;
 155   2              case 9:
 156   2                  D595(0X2A,0X2A,0X4A,0X2A);
 157   2                  ZLG7289_Download(2,2,0,0x02);
 158   2                      break;
 159   2              case 10:
 160   2                   D595(0X2A,0X2A,0X2A,0X2C);
 161   2                  ZLG7289_Download(2,3,0,0x02);
 162   2                      break;
 163   2              case 11:
 164   2                  D595(0X2A,0X2A,0X2A,0X32);
 165   2                  ZLG7289_Download(2,4,0,0x02);
 166   2                      break;
 167   2              case 12:
 168   2                  D595(0X2A,0X2A,0X2A,0X4A);
 169   2                  ZLG7289_Download(2,5,0,0x02);
 170   2                      break;
 171   2      
 172   2          case 25:
 173   2                 // D595(0X2A,0X2A,0X2A,0X2A);
 174   2                      break;
 175   2              default:
 176   2              //   D595(0X2A,0X2A,0X2A,0X2A);
 177   2                      break;
 178   2      }
 179   1      
C51 COMPILER V7.01  MAIN                                                                   01/07/2011 18:30:57 PAGE 4   

 180   1       }
 181          
 182          void with_key( void )
 183          {
 184   1              switch (key_7289 )
 185   1              {
 186   2              case 0:
 187   2                      keying=1;
 188   2                      break;
 189   2              case 8:
 190   2                      keying=2;
 191   2                      break;
 192   2              case 16:
 193   2                      keying=3;
 194   2                      break;
 195   2              case 24:
 196   2                      keying=4;
 197   2                      break;
 198   2              case 32:
 199   2                      keying=5;
 200   2                      break;
 201   2              case 40:
 202   2                      keying=6;
 203   2                      break;
 204   2              case 1:
 205   2                      keying=7;
 206   2                      break;
 207   2              case 9:
 208   2                      keying=8;
 209   2                      break;
 210   2              case 17:
 211   2                      keying=9;
 212   2                      break;
 213   2              case 25:
 214   2                      keying=10;
 215   2                      break;
 216   2              case 33:
 217   2                      keying=11;
 218   2                      break;
 219   2              case 41:
 220   2                      keying=12;
 221   2                      break;
 222   2              case 2:
 223   2                      keying=13;
 224   2                      break;
 225   2              case 10:
 226   2                      keying=14;
 227   2                      break;
 228   2              case 18:
 229   2                      keying=15;
 230   2                      break;
 231   2              case 26:
 232   2                      keying=16;
 233   2                      break;
 234   2              case 34:
 235   2                      keying=17;
 236   2                      break;
 237   2              case 42:
 238   2                      keying=18;
 239   2                      break;
 240   2              case 3:
 241   2                      keying=19;
C51 COMPILER V7.01  MAIN                                                                   01/07/2011 18:30:57 PAGE 5   

 242   2                      break;
 243   2              case 11:
 244   2                      keying=20;
 245   2                      break;
 246   2              case 19:
 247   2                      keying=21;
 248   2                      break;
 249   2              case 27:
 250   2                      keying=22;
 251   2                      break;
 252   2              case 35:
 253   2                      keying=23;
 254   2                      break;
 255   2              case 43:
 256   2                      keying=24;
 257   2                      break;
 258   2              case 4:
 259   2                      {
 260   3                              lineing=1;keying=25;dis_play( );
 261   3                      }
 262   2                      break;
 263   2              case 12:
 264   2                      {
 265   3                // { lineing=0;keying=25;dis_play( );} //no 2 wire case for this model
 266   3                      }
 267   2                      break;
 268   2              default:
 269   2      
 270   2                      break;
 271   2              }
 272   1      }
 273          
 274          
 275          
 276          void uart_232(void)  
 277          {
 278   1              SCON = 0x50; //串口方式1,允许接收
 279   1              TMOD = 0x21; //定时器1定时方式2
 280   1              TH1 = 0xfa;TL1 = 0xfa;    //1200比特
 281   1              PCON = 0x80; //波特率加倍控制,SMOD位
 282   1              //  TI = 1;              //开启定时器1
 283   1              ET1 =0;
 284   1              TR1 = 1; //启动定时器
 285   1              EA=1;    //打开总中断
 286   1              ES=1;    //打开串行中断
 287   1      }
 288          /***********发送一个字节*********/
 289          void  UART_SENDBIT(unsigned char UART_data)
 290          {
 291   1              TI = 0; 
 292   1              SBUF =UART_data; //输出字符
 293   1              while(!TI);      //空语句判断字符是否发完
 294   1              TI = 0;          //清TI
 295   1      }
 296          
 297          /**********串口中断接收*********/
 298          void serial () interrupt 4 using 3
 299          {
 300   1      
 301   1              if (RI)          //RI==开始接收
 302   1              {
 303   2                      UART_DAT=SBUF;
C51 COMPILER V7.01  MAIN                                                                   01/07/2011 18:30:57 PAGE 6   

 304   2                      //UART_SENDBIT(UART_DAT);
 305   2                      RI = 0 ;       //软件RI=0 //
 306   2      
 307   2              }
 308   1      }
 309          
 310          #define BUFFER_MAX      15
 311          
 312          void main( void )
 313          {
 314   1              unsigned char uart_buffer[BUFFER_MAX];
 315   1              unsigned char uart_ptr;
 316   1      
 317   1              ZLG7289_pinINT = 1;
 318   1      
 319   1              ZLG7289_Init(40)          ;
 320   1              ZLG7289_Reset();
 321   1              int_jdq()  ;
 322   1              lineing=1; //4 wire model
 323   1              keying=25;
 324   1              dis_play();
 325   1              uart_232();
 326   1              uart_ptr = 0;
 327   1              key_7289_ed = 0xfe; //invalid last value;
 328   1              while(1){
 329   2                      if(ZLG7289_pinINT ==0)
 330   2                      {
 331   3                              key_7289=ZLG7289_Key();
 332   3                              if(key_7289!=key_7289_ed)
 333   3                              {
 334   4                                      with_key();
 335   4                                      key_7289_ed=key_7289;
 336   4                                      if(lineing==1 && keying<13) //this model is for 4 wire only
 337   4                                      {
 338   5                                              dis_play( );
 339   5                                      }
 340   4                              }
 341   3                      }
 342   2                      if(UART_DAT!=0)
 343   2                      {
 344   3                              
 345   3                              uart_buffer[uart_ptr] = UART_DAT;
 346   3                              UART_DAT = 0;
 347   3                              uart_ptr++;
 348   3                              if(uart_ptr >= BUFFER_MAX)
 349   3                              {
 350   4                                      uart_ptr = 0;
 351   4                                      continue;
 352   4                              }
 353   3                              if(uart_buffer[uart_ptr-1] != 0x0A) //end of command
 354   3                                      continue;
 355   3                              if((uart_ptr <= 2) || (uart_buffer[uart_ptr-2] != 0x0D)) //not ended with 0x0D,0x0A
 356   3                              {
 357   4                                      uart_ptr = 0;
 358   4                                      continue;
 359   4                              }
 360   3                              if((uart_ptr == 3) && (uart_buffer[uart_ptr-3] == '!')) //2wire
 361   3                              {
 362   4      /*                              lineing = 0;
 363   4                                      uart_ptr = 0;
 364   4                                      dis_play();
 365   4                                      continue;
C51 COMPILER V7.01  MAIN                                                                   01/07/2011 18:30:57 PAGE 7   

 366   4      */
 367   4                              }
 368   3                              if((uart_ptr == 3) && (uart_buffer[uart_ptr-3] == '#')) //4wire
 369   3                              {
 370   4                                      lineing = 1;
 371   4                                      uart_ptr = 0;
 372   4                                      dis_play();
 373   4                                      continue;
 374   4                              }
 375   3                              if((uart_ptr == 3) && (uart_buffer[uart_ptr-3] == '*')) //reset command
 376   3                              {
 377   4                                      keying = 25;
 378   4                                      dis_play();
 379   4                                      uart_ptr = 0;
 380   4                                      continue;
 381   4                              }
 382   3                              if((uart_ptr == 4) && (uart_buffer[0] > '0') && (uart_buffer[0] <= '9')) // 3A case
 383   3                              {
 384   4                                      keying = uart_buffer[0] - '0';
 385   4                                      dis_play( );
 386   4                                      uart_ptr = 0;
 387   4                                      continue;
 388   4                              }
 389   3                              if((uart_ptr == 5) && 
 390   3                                      (uart_buffer[1] >= '0') && (uart_buffer[1] <= '9') &&
 391   3                                      (uart_buffer[0] > '0') && (uart_buffer[0] <= '2')) //12A case
 392   3                              {
 393   4                                      keying = (uart_buffer[0] - '0')*10+(uart_buffer[1] - '0');
 394   4                                      if(keying < 13)
 395   4                                              dis_play( );
 396   4                                      uart_ptr = 0;
 397   4                                      continue;
 398   4                              }
 399   3                              uart_ptr = 0;
 400   3                              continue;
 401   3      
 402   3                      }       
 403   2                      _nop_();
 404   2              }                
 405   1      }
 406          
 407          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1217    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN lcd.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE lcd.c LARGE OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <STC51.h>
   2          #include <absacc.h>
   3          #include <intrins.h>
   4          #include <string.h>
   5          
   6          #include "lcd.h"
   7          #include "font.h"
   8          
   9          sbit LCD_WR =P0^4;  //Data Write into T6963C,L有效
  10          sbit LCD_RD =P0^3;  //Data Read from T6963C,L有效
  11          sbit LCD_CE =P0^2;  //使能信号，L有效
  12          sbit LCD_CD =P0^1;  //当wr=L,LCD_CD=H:写命令,LCD_CD=L:写数据;当rd=L,LCD_CD=H:读状态,LCD_CD=L:读数据
  13          sbit LCD_RST=P0^0;  //Lcm reset,低有效
  14          sbit LCD_FS =P0^5;  //字体选择,H:6*8点阵;L:8*8点阵
  15          
  16          sbit bf0 = P1^0;
  17          sbit bf1 = P1^1;
  18          sbit bf3 = P1^3;
  19          
  20          uchar code HexTable[]="0123456789ABCEDF";
  21          /*
  22          uchar code Num_Tab[]=
  23          {
  24                  // 48 0x30 '0' 
  25                  0x00, // 00000000 
  26                  0x00, // 00000000 
  27                  0x38, // 00   000 
  28                  0x44, // 0 000 00 
  29                  0x4c, // 0 00  00 
  30                  0x54, // 0 0 0 00 
  31                  0x64, // 0  00 00 
  32                  0x44, // 0 000 00 
  33                  0x38, // 00   000 
  34                  0x00, // 00000000 
  35                  0x00, // 00000000 
  36          
  37                  // 49 0x31 '1' 
  38                  0x00, // 00000000 
  39                  0x00, // 00000000 
  40                  0x08, // 0000 000 
  41                  0x18, // 000  000 
  42                  0x08, // 0000 000 
  43                  0x08, // 0000 000 
  44                  0x08, // 0000 000 
  45                  0x08, // 0000 000 
  46                  0x1c, // 000   00 
  47                  0x00, // 00000000 
  48                  0x00, // 00000000 
  49          
  50                  // 50 0x32 '2' 
  51                  0x00, // 00000000 
  52                  0x00, // 00000000 
  53                  0x38, // 00   000 
  54                  0x44, // 0 000 00 
  55                  0x04, // 00000 00 
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 2   

  56                  0x08, // 0000 000 
  57                  0x10, // 000 0000 
  58                  0x20, // 00 00000 
  59                  0x7c, // 0     00 
  60                  0x00, // 00000000 
  61                  0x00, // 00000000 
  62          
  63                  // 51 0x33 '3' 
  64                  0x00, // 00000000 
  65                  0x00, // 00000000 
  66                  0x38, // 00   000 
  67                  0x44, // 0 000 00 
  68                  0x04, // 00000 00 
  69                  0x18, // 000  000 
  70                  0x04, // 00000 00 
  71                  0x44, // 0 000 00 
  72                  0x38, // 00   000 
  73                  0x00, // 00000000 
  74                  0x00, // 00000000 
  75          
  76                  // 52 0x34 '4' 
  77                  0x00, // 00000000 
  78                  0x00, // 00000000 
  79                  0x08, // 0000 000 
  80                  0x18, // 000  000 
  81                  0x28, // 00 0 000 
  82                  0x48, // 0 00 000 
  83                  0x7c, // 0     00 
  84                  0x08, // 0000 000 
  85                  0x1c, // 000   00 
  86                  0x00, // 00000000 
  87                  0x00, // 00000000 
  88          
  89                  // 53 0x35 '5' 
  90                  0x00, // 00000000 
  91                  0x00, // 00000000 
  92                  0x7c, // 0     00 
  93                  0x40, // 0 000000 
  94                  0x78, // 0    000 
  95                  0x04, // 00000 00 
  96                  0x04, // 00000 00 
  97                  0x44, // 0 000 00 
  98                  0x38, // 00   000 
  99                  0x00, // 00000000 
 100                  0x00, // 00000000 
 101          
 102                  // 54 0x36 '6' 
 103                  0x00, // 00000000 
 104                  0x00, // 00000000 
 105                  0x38, // 00   000 
 106                  0x40, // 0 000000 
 107                  0x78, // 0    000 
 108                  0x44, // 0 000 00 
 109                  0x44, // 0 000 00 
 110                  0x44, // 0 000 00 
 111                  0x38, // 00   000 
 112                  0x00, // 00000000 
 113                  0x00, // 00000000 
 114          
 115                  // 55 0x37 '7' 
 116                  0x00, // 00000000 
 117                  0x00, // 00000000 
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 3   

 118                  0x7c, // 0     00 
 119                  0x04, // 00000 00 
 120                  0x04, // 00000 00 
 121                  0x08, // 0000 000 
 122                  0x10, // 000 0000 
 123                  0x10, // 000 0000 
 124                  0x10, // 000 0000 
 125                  0x00, // 00000000 
 126                  0x00, // 00000000 
 127          
 128                  // 56 0x38 '8' 
 129                  0x00, // 00000000 
 130                  0x00, // 00000000 
 131                  0x38, // 00   000 
 132                  0x44, // 0 000 00 
 133                  0x44, // 0 000 00 
 134                  0x38, // 00   000 
 135                  0x44, // 0 000 00 
 136                  0x44, // 0 000 00 
 137                  0x38, // 00   000 
 138                  0x00, // 00000000 
 139                  0x00, // 00000000 
 140          
 141                  // 57 0x39 '9' 
 142                  0x00, // 00000000 
 143                  0x00, // 00000000 
 144                  0x38, // 00   000 
 145                  0x44, // 0 000 00 
 146                  0x44, // 0 000 00 
 147                  0x44, // 0 000 00 
 148                  0x3c, // 00    00 
 149                  0x04, // 00000 00 
 150                  0x38, // 00   000 
 151                  0x00, // 00000000 
 152                  0x00, // 00000000 
 153          
 154          };
 155          //6x10μ?・??é
 156          uchar code BlockTab[]={
 157                  // 57 0x39 '9' 
 158                  0x00, // 00000000 
 159                  0x00, // 00000000 
 160                  0x7C, // 0     00 
 161                  0x7C, // 0     00 
 162                  0x7C, // 0     00 
 163                  0x7C, // 0     00 
 164                  0x7C, // 0     00 
 165                  0x7C, // 0     00 
 166                  0x7C, // 0     00 
 167                  0x00, // 00000000 
 168                  0x00, // 00000000 
 169                  //empty block
 170                  0x00, // 00000000 
 171                  0x00, // 00000000 
 172                  0x00, // 00000000 
 173                  0x00, // 00000000 
 174                  0x00, // 00000000 
 175                  0x00, // 00000000 
 176                  0x00, // 00000000 
 177                  0x00, // 00000000 
 178                  0x00, // 00000000 
 179                  0x00, // 00000000 
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 4   

 180                  0x00, // 00000000 
 181          };
 182          
 183          */
 184          
 185          
 186          
 187          
 188          
 189          void LCD_Busy (uchar autowr)    //测状态
 190          {
 191   1              LCD_CE = 0;
 192   1              LCD_DATA_BUS=0xff;
 193   1              LCD_CD=1;
 194   1              LCD_WR=1;
 195   1              LCD_RD=0;
 196   1              if(autowr)
 197   1              {
 198   2                      while(bf3==0)
 199   2                              ;
 200   2              }
 201   1              else
 202   1              {
 203   2                      while((bf0==0)||(bf1==0))
 204   2                              ;
 205   2              }
 206   1              LCD_RD=1;
 207   1      }
 208          uchar LCD_BusyStatus ()    //测状态
 209          {
 210   1              uchar dat;
 211   1              LCD_CE = 0;
 212   1              LCD_CD=1;
 213   1              LCD_RD=1;
 214   1              LCD_WR=1;
 215   1              LCD_DATA_BUS=0xff;
 216   1              LCD_RD=0;
 217   1              dat=LCD_DATA_BUS;
 218   1              LCD_RD=1;
 219   1              return dat;
 220   1      }
 221          
 222          /* 数据,指令读写判别 */
 223          void LCD_CheckBusy1(void)  
 224          {
 225   1              while ((LCD_BusyStatus()&3)!=3) {}
 226   1      }
 227          /* 数据自动读判别 */
 228          /*
 229          void LCD_CheckBusy2(void) 
 230          {                               
 231                  while ((LCD_BusyStatus()&4)!=4) {}
 232          } 
 233          */
 234          /* 数据自动写判别 */
 235          
 236          void LCD_CheckBusy3(void) 
 237          {
 238   1              while ((LCD_BusyStatus()&8)!=8) {}
 239   1      }
 240          
 241          /*------------写命令或数据到LCD--------------*/
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 5   

 242          void LCD_Write1 (uchar dat,uchar comm)       //写一个数据和一个命令
 243          {
 244   1              LCD_Data(dat);
 245   1              LCD_Comm(comm);
 246   1      }
 247          void LCD_Write2 (uchar datl,uchar dath,uchar comm)  //写两个数据和一个命令
 248          {
 249   1              LCD_Data(datl);
 250   1              LCD_Data(dath);
 251   1              LCD_Comm(comm);
 252   1      }
 253          void LCD_WriteInt (uint dat,uchar comm)       //写一个16进制数据和一个命令
 254          {
 255   1              uchar datl,dath;
 256   1              datl=dat;
 257   1              dath=dat>>8;
 258   1              LCD_Data(datl);
 259   1              LCD_Data(dath);
 260   1              LCD_Comm(comm);
 261   1      }
 262          void LCD_AutoWrite (uchar dat)               //自动写数据
 263          {
 264   1              LCD_CE = 0;
 265   1              LCD_CheckBusy3();//     LCD_Busy (1);
 266   1              LCD_CD=0;
 267   1              LCD_RD=1;
 268   1              LCD_DATA_BUS=dat;
 269   1              LCD_WR=0;
 270   1              LCD_WR=1;
 271   1      }
 272          /*      读数据  */
 273          uchar LCD_Read(void) 
 274          {
 275   1              uchar dat;
 276   1              LCD_CE = 0;
 277   1              LCD_CheckBusy1();
 278   1              LCD_CD = 0;
 279   1              LCD_WR = 1;
 280   1              LCD_DATA_BUS = 0xff;
 281   1              LCD_RD=0;
 282   1              dat=LCD_DATA_BUS;
 283   1              LCD_RD=1;
 284   1              LCD_CD=1;
 285   1              return dat;
 286   1      }
 287          /*      自动读数据      */
 288          /*
 289          uchar LCD_AutoRead(void) 
 290          {
 291                  uchar dat;
 292                  LCD_CE = 0;
 293                  LCD_CheckBusy2();
 294                  LCD_CD=0;
 295                  LCD_DATA_BUS = 0xff;
 296                  LCD_RD=0;
 297                  dat=LCD_DATA_BUS;
 298                  LCD_RD=1;
 299                  LCD_CD=1;
 300                  return dat;
 301          }
 302          */
 303          void LCD_Comm (uchar comm)       //写命令
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 6   

 304          {
 305   1              LCD_CE = 0;
 306   1              LCD_CheckBusy1();//     LCD_Busy (0);
 307   1              LCD_CD=1;
 308   1              LCD_RD=1;
 309   1              LCD_DATA_BUS=comm;
 310   1              LCD_WR=0;
 311   1              LCD_WR=1;
 312   1      }
 313          void LCD_Data (uchar dat)       //写数据
 314          {
 315   1              LCD_CE = 0;
 316   1              LCD_CheckBusy1();//     LCD_Busy (0);
 317   1              LCD_CD=0;
 318   1              LCD_RD=1;
 319   1              LCD_DATA_BUS=dat;
 320   1              LCD_WR=0;
 321   1              LCD_WR=1;
 322   1      }
 323          
 324          /*------------------初始化-----------------*/
 325          void LCD_Init (void) 
 326          {
 327   1              //LCD_RST=0;
 328   1              //;
 329   1              //LCD_RST=1;
 330   1              //LCD_FS=0;
 331   1              //LCD_CE=0;
 332   1              
 333   1              LCD_CE = 1;
 334   1              LCD_WR=1;
 335   1              LCD_RD=1;
 336   1              LCD_FS=0;
 337   1      
 338   1              LCD_WriteInt(LCD_TEXT_HOME_ADDR,0x40);  //文本显示区首地址
 339   1              LCD_WriteInt(LCD_GRAPH_HOME_ADDR,0x42); //图形显示区首地址
 340   1              LCD_Write2(LCD_WIDTH,0x00,0x41);        //文本显示区宽度
 341   1              LCD_Write2(LCD_WIDTH,0x00,0x43);        //图形显示区宽度
 342   1              LCD_Comm(0x81);                         //逻辑"异或"
 343   1              LCD_Write2(0x02,0x00,0x22);             //CGRAM偏置地址设置
 344   1              LCD_Comm(0x9c);                         //启用文本显示,启用图形显示
 345   1              //LCD_Comm(0x98);                               //启用文本显示,启用图形显示
 346   1              
 347   1              LCD_Cls();
 348   1      }
 349          
 350          /********************************************************/
 351          /* 清屏                                                 */
 352          /********************************************************/
 353          void LCD_Cls(void) 
 354          {
 355   1              uint  i;
 356   1              //LCD_CE = 0;
 357   1              //LCD_Write2(0x00,0x00,LC_ADD_POS);// 置地址指针为从零开始
 358   1              LCD_WriteInt(LCD_TEXT_HOME_ADDR,LC_ADD_POS);
 359   1              LCD_Comm(LC_AUT_WR);            // 自动写
 360   1              for(i=0;i< (LCD_HEIGHT+8)*LCD_WIDTH;i++)        // 清一屏
 361   1              {
 362   2                      LCD_AutoWrite(0x00);            // 写数据0x00
 363   2              }
 364   1              LCD_Comm(LC_AUT_OVR);           // 自动写结束
 365   1              LCD_Write2(0x00,0x00,LC_ADD_POS);// 重置地址指针
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 7   

 366   1      }
 367          
 368          void LCD_ClsBlock(uchar x1,uchar y1,uchar x2,uchar y2)
 369          {
 370   1              uint addr;
 371   1              uchar h,w;
 372   1              uchar i,j;
 373   1              
 374   1              //x坐标要8字节对齐
 375   1              x1 =(x1 / 8) * 8;
 376   1              x2 =(x2 / 8) * 8;
 377   1              
 378   1              h = y2 - y1;
 379   1              w = (x2 - x1)/8;
 380   1              
 381   1              addr = LCD_GRAPH_HOME_ADDR + LCD_WIDTH * y1 + x1/8;
 382   1              
 383   1              for(j=0;j<h;j++)
 384   1              {
 385   2                      LCD_WriteInt(addr,0x24);
 386   2                      LCD_Comm(0xb0);
 387   2                      LCD_CheckBusy1();
 388   2                      for(i=0;i<w;i++)
 389   2                      {
 390   3                              LCD_AutoWrite(0x00);
 391   3                      }
 392   2                      LCD_CheckBusy3();
 393   2                      LCD_Comm(0xb2);
 394   2                      addr += LCD_WIDTH;
 395   2              }
 396   1      }
 397          
 398          
 399          /*      设定图形x,y值*/
 400          /*
 401          void LCD_GraphSetAddr(uchar x,uchar y) 
 402          {
 403                  uint xy;
 404                  xy=y;
 405                  xy=xy*16+x+256;
 406                  //LCD_CE = 0;
 407                  LCD_Write2(xy&0xff,xy/256,0x24);
 408          }
 409          */
 410          /*      设定文本x,y值   */
 411          /*
 412          void LCD_TextSetAddr(uchar x,uchar y) 
 413          {
 414                  //LCD_CE = 0;
 415                  LCD_Write2(y*16+x,0,0x24);
 416          }
 417          */
 418          /*      清除一点*/
 419          /*
 420          void LCD_ClrPixel(uchar x,uchar y) 
 421          {
 422                  uchar b;
 423                  uint addr = LCD_GRAPH_HOME_ADDR + y * LCD_WIDTH + x / 8;
 424          
 425                  b = 7 - (x % 8);
 426                  
 427                  LCD_WriteInt(addr,0x24);
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 8   

 428                  LCD_Comm(0xf0|b);
 429          }
 430          */
 431          /*      点亮一点        */
 432          
 433          void LCD_Putpixel(uchar x,uchar y) 
 434          {
 435   1              uchar b;
 436   1              uint addr = LCD_GRAPH_HOME_ADDR + y * LCD_WIDTH + x / 8;
 437   1      
 438   1              b = 7 - (x % 8);
 439   1              
 440   1              LCD_WriteInt(addr,0x24);
 441   1              LCD_Comm(0xf8|b);
 442   1      }
 443          
 444          /*      x,y处显示光标   */
 445          /*
 446          void LCD_ShowCursor(uchar x,uchar y) 
 447          {
 448                  return;
 449                  //LCD_CE = 0;
 450                  LCD_Comm(0x97); //光标开
 451                  LCD_Write2(x,y,0x21);
 452          }
 453          
 454          //      取消光标
 455          
 456          void LCD_HideCursor(void)  
 457          {
 458                  return; 
 459                  //LCD_CE = 0;
 460                  LCD_Comm(0x9c); 
 461          }
 462          */
 463          void LCD_PutImg(uchar x,uchar y,uchar w,uchar h,uchar *img) 
 464          {
 465   1              uint data addr;
 466   1              uchar data i,j;
 467   1              uchar data c;
 468   1              
 469   1              addr = LCD_GRAPH_HOME_ADDR + LCD_WIDTH * y + (x / 8);
 470   1              
 471   1              //LCD_CE = 0;
 472   1              for(j=0;j<h;j++)
 473   1              {
 474   2                      LCD_WriteInt(addr,0x24);
 475   2                      LCD_Comm(0xb0);
 476   2                      LCD_CheckBusy1();
 477   2                      for(i=0;i<w;i++)
 478   2                      {
 479   3                              c = img[j*w+i] ;
 480   3                              LCD_AutoWrite(c);
 481   3                                      
 482   3                              //LCD_WriteInt(addr +i,0x24);   //+ LCD_WIDTH *j
 483   3                              //LCD_Write1(c,0xc0);
 484   3                      }
 485   2                      LCD_CheckBusy3();
 486   2                      LCD_Comm(0xb2);
 487   2                      addr += LCD_WIDTH;
 488   2              }
 489   1      }
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 9   

 490          /*
 491          void LCD_PrintNumStr(uchar x,uchar y,uchar *s) 
 492          {
 493                  x =(x / 8) * 8;
 494          
 495                  while(*s)
 496                  {
 497                          LCD_PutImg(x,y,1,11,Num_Tab + (*s - '0') * 11);
 498                          
 499                          x = x + 8;
 500                          
 501                          s++;
 502                  }
 503          }
 504          
 505          
 506          void LCD_PrintBlackBlock(uchar x,uchar y,bool not_empty)
 507          {
 508                  x =(x / 8) * 8;
 509                  LCD_PutImg(x,y,1,11,BlockTab + (not_empty?0:1) * 11);
 510          }
 511          */
 512          void LCD_ReverseRect(uchar x,uchar y,uchar w,uchar h)
 513          {
 514   1              uint data addr;
 515   1              uchar data i,j;
 516   1              uchar data c;
 517   1              
 518   1              x =(x / 8) * 8;
 519   1              addr = LCD_GRAPH_HOME_ADDR + LCD_WIDTH * y + x/8;
 520   1              
 521   1              for(j=0;j<h;j++)
 522   1              {
 523   2                      for(i=0;i<w;i++)
 524   2                      {
 525   3                              LCD_WriteInt(addr +i,0x24);     
 526   3                              LCD_Comm(LC_NOC_RD);
 527   3                              c = LCD_Read();
 528   3                              c = ~c;
 529   3      
 530   3                              LCD_Write1(c,LC_NOC_WR);
 531   3                      }
 532   2                      addr += LCD_WIDTH;
 533   2              }
 534   1      }
 535          /*
 536          void LCD_PrintWord(uchar x,uchar y,uint16 n,uchar start) 
 537          {
 538                  uchar buf[4];
 539                  int i;
 540                  
 541                  if(start > 3) start = 0;
 542                  
 543                  for(i = 0; i < 4; i++)
 544                  {
 545                          buf[i] = n % 10;   
 546                          n /= 10;
 547                  }
 548                  x =(x / 8) * 8;
 549                  
 550                  for(i = 3-start; i >= 0; i--)
 551                  {
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 10  

 552                          LCD_PutImg(x,y,1,11,Num_Tab + buf[i] * 11);
 553                          
 554                          x = x + 8;
 555                  }
 556          }
 557          void LCD_PrintHex(uchar x,uchar y,uchar hex) 
 558          {
 559                  uchar c1,c2;
 560                  //低4位
 561                  c1 = hex & 0x0f;        //lo
 562                  //高4位
 563                  c2 = (hex >> 4) & 0x0f; //hi
 564          
 565                  LCD_PutImg(x,y,1,11,Num_Tab + c2 * 11);
 566                  LCD_PutImg(x+8,y,1,11,Num_Tab + c1 * 11);
 567          }
 568          
 569          void LCD_GrapPutchar(uchar x,uchar y,uchar num) 
 570          {
 571                  uchar i,j;
 572                  uchar dot;
 573                  num = (num- '0')*9;
 574                  //LCD_CE = 0;
 575                  for(i=0; i< 12;i++)
 576                  {
 577                          dot = Num_Tab[num + i];
 578                          for(j = 0; j < 7; j++)
 579                          {
 580                                  if( dot & 0x80)
 581                                          LCD_Putpixel(x+j,y);
 582                                  else
 583                                          LCD_ClrPixel(x+j,y);
 584                                          
 585                                  dot <<= 1;
 586                          }
 587                          y++;
 588                  }
 589          }
 590          
 591          void LCD_GrapPrint(uchar x,uchar y,uchar code *s) 
 592          {
 593                  while(*s)
 594                  {
 595                          LCD_GrapPutchar(x,y,*s);
 596                          x += 8;
 597                          s++;
 598                  }
 599          }
 600          */
 601          /*--------------显示字符------------------*/
 602          /*
 603          void LCD_TextPutchar(uchar x,uchar y,uchar c) 
 604          {
 605                  //LCD_CE = 0;
 606                  LCD_WriteInt(LCD_TEXT_HOME_ADDR + LCD_WIDTH * y + x,0x24);
 607                  LCD_Comm(0xb0);
 608                  LCD_AutoWrite(c - 0x20);
 609                  LCD_Comm(0xb2);
 610          }
 611          
 612          void LCD_TextPrint(uchar x,uchar y,char *s) 
 613          {
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 11  

 614                  //LCD_CE = 0;
 615                  LCD_WriteInt(LCD_TEXT_HOME_ADDR + LCD_WIDTH * y + x,0x24);
 616                  LCD_Comm(0xb0);
 617                  while(*s)
 618                  {
 619                          LCD_AutoWrite(*s - 0x20);
 620                          s++;
 621                  }
 622                  LCD_Comm(0xb2);
 623          }
 624          void LCD_TextPrintWord(uchar x,uchar y,uint16 n,uchar start) 
 625          {
 626                  uchar buf[4];
 627                  int i;
 628                  
 629                  if(start > 3) start = 0;
 630                  
 631                  for(i = 0; i < 4; i++)
 632                  {
 633                          buf[i] = n % 10;   
 634                          n /= 10;
 635                  }
 636                  
 637                  for(i = 3-start; i >= 0; i--)
 638                  {
 639                          LCD_TextPutchar(x,y,'0' + buf[i]);
 640                          x ++;
 641                  }
 642          }
 643          
 644          void LCD_TextPrintHex(uchar x,uchar y,uchar hex) 
 645          {
 646                  uchar c1,c2;
 647                  //低4位
 648                  c1 = hex & 0x0f;        //lo
 649                  //高4位
 650                  c2 = (hex >> 4) & 0x0f; //hi
 651                  
 652                  LCD_TextPutchar(x,y,HexTable[c2]);
 653                  LCD_TextPutchar(x+1,y,HexTable[c1]);
 654          }
 655          */
 656          /************************************************/
 657          /*画线。任意方向的斜线,直线数学方程 aX+bY=1     */
 658          /************************************************/
 659          /*
 660          void LCD_Linexy(uchar x0,uchar y0,uchar xt,uchar yt) 
 661          {
 662                  register uchar t;
 663                  int xerr=0,yerr=0,delta_x,delta_y,distance;
 664                  int incx,incy,uRow,uCol;
 665          
 666                  delta_x = xt-x0;                                //计算坐标增量
 667                  delta_y = yt-y0;
 668                  uRow = x0;
 669                  uCol = y0;
 670                  if(delta_x>0) incx=1;                           //设置单步方向
 671                  else if( delta_x==0 ) incx=0;                   //垂直线
 672                  else {incx=-1;delta_x=-delta_x;}
 673          
 674                  if(delta_y>0) incy=1;
 675                  else if( delta_y==0 ) incy=0;                   //水平线
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 12  

 676                  else {incy=-1;delta_y=-delta_y;}
 677          
 678                  if( delta_x > delta_y ) distance=delta_x;       //选取基本增量坐标轴
 679                  else distance=delta_y;
 680          
 681                  //LCD_CE = 0;
 682                  for( t=0;t <= distance+1; t++ )
 683                  {                                       //画线输出
 684                          LCD_Putpixel(uRow,uCol);                        //画点
 685                          xerr += delta_x ;
 686                          yerr += delta_y ;
 687                          
 688                          if( xerr > distance )
 689                          {
 690                                  xerr-=distance;
 691                                  uRow+=incx;
 692                          }
 693                          if( yerr > distance )
 694                          {
 695                                  yerr-=distance;
 696                                  uCol+=incy;
 697                          }
 698                  }
 699          }
 700          */
 701          /*
 702          void LCD_LineH(uchar y) 
 703          {
 704                  char i;
 705                  
 706                  //LCD_CE = 0;
 707                  LCD_WriteInt(LCD_GRAPH_HOME_ADDR + LCD_WIDTH * y ,0x24);
 708                  LCD_Comm(0xb0);
 709                  for(i=0;i<LCD_WIDTH;i++)
 710                          LCD_AutoWrite(0xff);
 711                  LCD_Comm(0xb2);
 712          }
 713          */
 714          void LCD_LineV(uchar x,uchar y1,uchar y2) 
 715          {
 716   1              int i;
 717   1              //LCD_CE = 0;
 718   1              for(i = y1; i < y2; i++)
 719   1              {
 720   2                      LCD_Putpixel(x,i);              
 721   2              }
 722   1              
 723   1      }
 724          
 725          
 726          void LCD_LineXX(uchar x1,uchar x2,uchar y)
 727          {
 728   1              int i;
 729   1              for(i = x1; i < x2; i++)
 730   1              {
 731   2                      LCD_Putpixel(i,y);              
 732   2              }
 733   1      }
 734          
 735          void LCD_Rectange(uchar x1,uchar y1,uchar x2,uchar y2)
 736          {
 737   1              LCD_LineXX(x1,x2,y1);
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 13  

 738   1              LCD_LineXX(x1,x2,y2);
 739   1              LCD_LineV(x1,y1,y2);
 740   1              LCD_LineV(x2,y1,y2);
 741   1      }
 742          
 743          
 744          
 745          FNT_GB12 code *GetHzk12(uchar c1,uchar c2)
 746          {
 747   1              int i = 0;
 748   1      
 749   1              while(HZK12[i].Index[0] != 0)
 750   1              {
 751   2                      if(c1 == HZK12[i].Index[0] && c2 == HZK12[i].Index[1])
 752   2                              return &HZK12[i];
 753   2                      i ++;
 754   2              }
 755   1              return NULL;
 756   1      }
 757          
 758          
 759          FNT_GB16 code *GetHzk16(uchar c1,uchar c2)
 760          {
 761   1              int i = 0;
 762   1      
 763   1              while(HZK16[i].Index[0] != 0)
 764   1              {
 765   2                      if(c1 == HZK16[i].Index[0] && c2 == HZK16[i].Index[1])
 766   2                              return &HZK16[i];
 767   2                      i ++;
 768   2              }
 769   1              return NULL;
 770   1      }
 771          
 772          void LCD_PrintHz12(uchar x,uchar y,uchar *s)
 773          {
 774   1              uchar c1,c2;
 775   1              //x坐标必需是8位对齐
 776   1              x =(x / 8) * 8;
 777   1              while(*s)
 778   1              {
 779   2                      c1 = *s++;
 780   2                      if(c1 == ' ')
 781   2                              x += 8;
 782   2                      else if( c1 > 0x80)
 783   2                      {
 784   3                              //汉字
 785   3                              c2 = *s++;
 786   3                              LCD_PutImg(x,y+2,2,12,GetHzk12(c1,c2)->Msk);
 787   3                              x += 16;        
 788   3                      }
 789   2                      else    //ASCII
 790   2                      {
 791   3                              LCD_PutImg(x,y,1,16,ASC8x16[c1]);       //-
 792   3                              x += 8;
 793   3                      }
 794   2              }
 795   1      }
 796          
 797          
 798          void LCD_PrintHz16(uchar x,uchar y,uchar *s)
 799          {
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 14  

 800   1              uchar c1,c2;
 801   1              //x坐标必需是8位对齐
 802   1              x =(x / 8) * 8;
 803   1              while(*s)
 804   1              {
 805   2                      c1 = *s++;
 806   2                      if(c1 == ' ')
 807   2                      {
 808   3                              LCD_PutImg(x,y,1,16,ASC8x16[' ']);
 809   3                              LCD_PutImg(x+8,y,1,16,ASC8x16[' ']);
 810   3                              x += 16;
 811   3                      }
 812   2                      else if( c1 > 0x80)
 813   2                      {
 814   3                              //汉字
 815   3                              c2=*s++;
 816   3                              LCD_PutImg(x,y,2,16,GetHzk16(c1,c2)->Msk);
 817   3                              x += 16;        
 818   3                      }
 819   2                      else    //ASCII
 820   2                      {
 821   3                              LCD_PutImg(x,y+2,1,16,ASC8x16[c1]);     //-
 822   3                              x += 8;
 823   3                      }
 824   2              }
 825   1      }
 826          
 827          //显示6x8的数字
 828          void LCD_Print6X8(uchar x, uchar y,uchar *s)
 829          {
 830   1              //x坐标必需是8位对齐
 831   1              x =(x / 8) * 8;
 832   1              while(*s)
 833   1              {
 834   2                      LCD_PutImg(x,y,1,8,font6x8[*s - 32]);   //-
 835   2                      x += 8;
 836   2      
 837   2                      s ++;
 838   2              }
 839   1      }
 840          
 841          //显示6x8的数字
 842          void LCD_Print8X16(uchar x, uchar y,uchar *s)
 843          {
 844   1              //x坐标必需是8位对齐
 845   1              x =(x / 8) * 8;
 846   1              while(*s)
 847   1              {
 848   2                      LCD_PutImg(x,y,1,16,ASC8x16[*s]);       //-
 849   2                      x += 8;
 850   2      
 851   2                      s ++;
 852   2              }
 853   1      }
 854          
 855          //显示24x32的数字
 856          /*
 857          void LCD_Print24X32(uchar x, uchar y,uchar *s)
 858          {
 859                  //x坐标必需是8位对齐
 860                  x =(x / 8) * 8;
 861                  while(*s)
C51 COMPILER V7.01  LCD                                                                    12/04/2011 13:12:40 PAGE 15  

 862                  {
 863                          if( *s >= '0' && *s <= '9')     //显示
 864                          {
 865                                  LCD_PutImg(x,y,3,32,Font24X32[*s-'0']);
 866                                  x += 24;
 867                          }
 868                          else if( *s == ' ')
 869                          {
 870                                  x += 8;
 871                          }
 872                          else if( *s == '-')
 873                          {
 874                                  LCD_PutImg(x,y,3,32,Font24X32[12]);
 875                                  x += 24;
 876                          }
 877                          else
 878                          {
 879                                  LCD_PutImg(x,y+16,1,16,ASC8x16[*s]);    //
 880                                  x += 8;
 881                          }
 882                          s ++;
 883                  }
 884          }*/
 885          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1812    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----      62
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

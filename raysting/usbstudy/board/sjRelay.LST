C51 COMPILER V7.01  SJRELAY                                                                04/27/2014 14:00:41 PAGE 1   


C51 COMPILER V7.01, COMPILATION OF MODULE SJRELAY
OBJECT MODULE PLACED IN sjRelay.OBJ
COMPILER INVOKED BY: C:\GreenTools\Keil\C51\BIN\C51.EXE sjRelay.c LARGE OPTIMIZE(SIZE) BROWSE MODP2 DEBUG OBJECTEXTEND

stmt level    source

   1          #include "sjDefine.h"
   2          
   3          
   4          //the length of the switch table ,
   5          //which must lower than 3fh
   6          #define  LINIT 32 
   7          
   8          //for P1 output
   9          //for P0 output
  10          const unsigned char code tbl[8]={0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE};
  11          
  12          
  13          
  14          
  15          //for Init use(regaddr of pc)
  16          const unsigned char code inittbl[LINIT]={
  17                  0x2B, 0x39, 0x38, 0x18, 0x17, 0x1A, 0x43, 0x41, 
  18                  0x08, 0x1B, 0x09, 0x19, 0x2C, 0x26, 0x27, 0x0F, 
  19                  0x3E, 0x3F, 0x3C, 0x3D, 0x0C, 0x23, 0x20, 0x14, 
  20                  0x1F, 0x24, 0x02, 0x33, 0x21, 0x32, 0xff, 0xff
  21          
  22          
  23          /*********** 05-1-25  8:44 ****************/
  24          
  25          //  FKI1,FKI2,FKI3,OKI4,PKTT,FHP9,FHP7,FST2,
  26          //    0x37,0x36,0x35,0x3D,0x33,0x32,0x31,0x30,
  27          
  28          //  FHP3,FHN3,FHP4,FHN4,FST1,FHX1,FHX2,FFX1,  
  29          //      0x26,0x27,0x24,0x25,0x22,0x23,0x20,0x21,
  30          
  31          //  FHP10,FHP1,FHN1,FHP2,FHN2,FHN5,FHP8,FHN6,
  32          //      0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,
  33          
  34          //  FKN1,FKN2,FKN3,FKN4,FKN5,OKN6,FHP6,FHP5
  35          //      0x06,0x07,0x04,0x05,0x02,0x0A,0x00,0x01
  36          /*******************************************
  37          //  FKI1,FKI2,FKI3,OKI4,PKTT,FHP9,FHP7,FST2,
  38              0x37,0x36,0x35,0x3D,0x33,0x17,0x11,0x30,
  39          
  40          //  FHP3,FHN3,FHP4,FHN4,FST1,FHX1,FHX2,FFX1,  
  41                  0x24,0x27,0x01,0x25,0x22,0x23,0x20,0x21,
  42          
  43          //  FHP10,FHP1,FHN1,FHP2,FHN2,FHN5,FHP8,FHN6,
  44                  0x32,0x14,0x15,0x26,0x13,0x12,0x32,0x10,
  45          
  46          //  FKN1,FKN2,FKN3,FKN4,FKN5,OKN6,FHP6,FHP5
  47                  0x06,0x07,0x04,0x05,0x02,0x0A,0x31,0x00
  48          ********************************************/
  49          };
  50          
  51          //when modification is applied,
  52          //no address should be modified ,just set the mcu addr= 256,
  53          //and add new item in mcuaddr
  54          //C? IT IS SO EASY ,
  55          //BUT ,A NEW REGISTER MODEL WILL BE APPLIED IN THE FUTURE.
C51 COMPILER V7.01  SJRELAY                                                                04/27/2014 14:00:41 PAGE 2   

  56          /*          board allocation (F,O)=P0*8+P1
  57                          48,49   50,51   52,53   54,55   57,56   59,58   61,60   63,62   //HPo,HNo,??,HP0,H8,H7,STo,STi
  58                          33,32   35,34   37,36   39,38   41,40   43,42   45,44   47,46   //HN4,HP4,HN3,HP3,HN6,HP6,HN5,HP5
  59                          17,16   19,18   21,20   23,22   25,24   27,26   29,28   31,30   //KN4,KN3,KN2,KN1,H9,FX1,KTT,KN5
  60                          0,1             2,3             4,5             6,7             9,8             11,10   13,12   15,14   //H2,H1,HX2,HX1,KI4,KI3,KI2,KI1
  61          const unsigned char pcaddr[] ={
  62                          0x16,0x14,0x26,0x24,0x01,0x00,0x31,0x11,0x32,0x17,//FHP 0-9 (pc addr)
  63                          0x1f,0x1d,0x2f,0x2d,0x08,0x09,0x38,0x18,0x3b,0x1e,//OHP 10-19 (pc addr)
  64                          0x15,0x13,0x27,0x25,0x12,0x10,                                    //FHN 20-25  (pc addr)
  65                          0x1c,0x1a,0x2e,0x2c,0x1b,0x19,                                    //OHN 26-31  (pc addr)
  66                          0x06,0x07,0x04,0x05,0x02,0x03,                                    //FKN 32-37  (pc addr)
  67                          0x0f,0x0e,0x0d,0x0c,0x0b,0x0a,                                    //OKN 38-42  (pc addr)
  68                          0x37,0x36,0x35,0x34,                                                      //FKI 44-47      (pc addr)
  69                          0x3e,0x3f,0x3c,0x3d,                                                      //OKI 48-51      (pc addr)
  70                          0x23,0x20,0x21,0x33,0x22,0x30,                                    //FHX1,FHX2,FFX1,PKTT,FSTI,FSTO 52-57  (pc addr)
  71                          0x2a,0x29,0x28,0x3a,0x2b,0x39,                                    //OHX1,OHX2,OFX1,NKTT,OSTI,OSTO, 58-63 (pc addr)
  72                          0x41,0x40,0x43,0x42};                                                     //FHPO,OHP0,FHNO,OHNO  (pc addr)
  73          const unsigned char mcuaddr[] ={
  74                       54,  2     ,  0,   39,      35,  47,  43,  59,  57, 25,   //FHP 0-9 (pc addr)
  75                           55,  3 ,  1,   38,      34,  46,  42,  58,      56, 24,   //OHP 10-19 (pc addr)
  76                           255, 255,  37,  33,  45,   41,                                    //FHN 20-25  (pc addr)
  77                           255, 255,  36,  32,  44,   40,                    //OHN 26-31  (pc addr)
  78                           23,   21,  19,  17,  31,  255,                                    //FKN 32-37  (pc addr) ?(54)
  79                           22,   20,  18,  16,  30,  255,                    //OKN 38-42  (pc addr) ?(55)
  80                           15,   13,  11,  9,                                                                //FKI 44-47     (pc addr)
  81                           14,   12,  10,  8,                                                                //OKI 48-51     (pc addr)
  82                           6,   4,   27,  29,  63,  61,                                      //FHX1,FHX2,FFX1,PKTT,FSTI,FSTO 52-57  (pc addr)
  83                           7,   5,   26,  28,  62,  60,                                      //OHX1,OHX2,OFX1,NKTT,OSTI,OSTO, 58-63 (pc addr)
  84                           48,  49,  50,  51};                                                       //FHPO,OHP0,FHNO,OHNO  (pc addr)
  85          
  86                           CHAINED ADDRESS
  87          
  88          ON OFF 
  89          
  90          40 41  REG21
  91          42 43  REG22
  92          13 1A  REG23
  93          1E 17  REG24
  94          
  95          
  96          11 18  REG11
  97          31 38  REG12
  98          30 39  REG13
  99          22 2B  REG14
 100          
 101          05 0C  REG61
 102          04 0D  REG62
 103          07 0E  REG63
 104          06 0F  REG64
 105          
 106          32 3B  REG51
 107          21 28  REG52
 108          33 3A  REG53
 109          02 0B  REG54
 110          
 111          10 19  REG31
 112          00 09  REG32
 113          12 1B  REG33
 114          01 08  REG34
 115          
 116          25 2C  REG41
 117          24 2D  REG42
C51 COMPILER V7.01  SJRELAY                                                                04/27/2014 14:00:41 PAGE 3   

 118          27 2E  REG43
 119          26 2F  REG44
 120          
 121          
 122                           
 123          */
 124          const unsigned char code lut[]={
 125          /*****05-1-25 8:44****
 126          47,35,31,255,19,17,23,21,  //0-7
 127          34,46,255,30,16,18,20,22,  //8-f
 128          41,59,45,255,2,255,54,25,  //10-17
 129          58,40,255,44,255,3,24,55,  //18-1f
 130          4,27,63,6,39,33,0,37,      //20-27
 131          26,5,7,62,32,38,36,1,      //28-2f
 132          61,43,57,29,9,11,13,15,    //30-37
 133          42,60,28,56,10,8,14,12,    //38-3f 
 134          49,48,51,50                                //40-43
 135          **********************/
 136          /*****05-1-25 8:44****/
 137          43,47,31,255,19,17,23,21,  //0-7  
 138          46,42,255,30,16,18,20,22,  //8-f
 139          41,57,45,53,0,255,2,54,  //10-17
 140          56,40,52,44,255,1,55,3,  //18-1f
 141          4,27,63,6,35,33,39,37,      //20-27
 142          26,5,7,62,32,34,36,38,      //28-2f
 143          61,59,25,29,9,11,13,15,    //30-37
 144          58,60,28,24,10,8,14,12,    //38-3f 
 145          49,48,51,50                                //40-43
 146          /**********************/
 147          };
 148          
 149          //delay loop
 150          void swiDelay(unsigned char dl1,unsigned char dl2)
 151          {
 152   1              unsigned char i,j;
 153   1              for(i=0;i<dl1;i++)
 154   1                      for(j=0;j<dl2;j++)
 155   1                              ;
 156   1      }
 157          
 158          
 159          void swiAction(unsigned char SwiID)
 160          {
 161   1              unsigned char exID;
 162   1      
 163   1              if(SwiID >= sizeof(lut))
 164   1                      return;
 165   1      
 166   1              exID = lut[SwiID];
 167   1              if(exID == 255)
 168   1                      return;
 169   1      
 170   1              P1 = tbl[(exID&7)];
 171   1              P0 = tbl[(exID>>3)];
 172   1              swiDelay(0x1f,0xff);
 173   1      
 174   1              P1 = 0xff;
 175   1              P0 = 0xff;
 176   1              swiDelay(0x03,0xff);
 177   1      }
 178          void swiReset()
 179          {
C51 COMPILER V7.01  SJRELAY                                                                04/27/2014 14:00:41 PAGE 4   

 180   1              unsigned char i;
 181   1              for(i=0;i<LINIT;i++)
 182   1              {
 183   2                      swiAction(inittbl[i]);
 184   2              }
 185   1      }
 186          
 187          void sjRelayInit()
 188          {
 189   1              swiReset();
 190   1              swiDelay(0x0f,0xff);
 191   1      }
 192          void cm_relay(unsigned char temp)
 193          {
 194   1                                      if(temp == HMARK)
 195   1                                      {
 196   2                                              while(1)
 197   2                                              {
 198   3                                                      temp = sjSerialWaitForOneByte();
 199   3                                                      if(temp == EMARK)
 200   3                                                              break;
 201   3                                                      if(temp == RMARK)
 202   3                                                      {
 203   4                                                              swiReset();
 204   4                                                              continue;
 205   4                                                      }
 206   3                                                      if(temp == QMARK)
 207   3                                                              continue;
 208   3                                                      swiAction(temp);
 209   3                                              }
 210   2                                              //sid = "";
 211   2                                              sjSerialSendByte(HMARK);
 212   2                                              temp = 0; //for DAC board should not read P2 here
 213   2                                              sjSerialSendByte(temp);
 214   2                                              temp = 0; //for DAC board should not read P3 here
 215   2      /*
 216   2                                              temp = 0;
 217   2                                              if(P3^4)
 218   2                                                      temp |= (0x10);
 219   2                                              if(P3^5)
 220   2                                                      temp |= (0x20);
 221   2      */
 222   2                                              sjSerialSendByte(temp);
 223   2                                              sjSerialSendByte(EMARK);
 224   2                                      }
 225   1      
 226   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    161    ----
   CONSTANT SIZE    =    108    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
